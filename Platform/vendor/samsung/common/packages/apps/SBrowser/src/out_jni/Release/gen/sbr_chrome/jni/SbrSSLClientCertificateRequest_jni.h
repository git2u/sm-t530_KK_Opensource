// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/chrome/browser/SbrSSLClientCertificateRequest

#ifndef org_samsung_chrome_browser_SbrSSLClientCertificateRequest_JNI
#define org_samsung_chrome_browser_SbrSSLClientCertificateRequest_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrSSLClientCertificateRequestClassPath[] =
    "org/samsung/chrome/browser/SbrSSLClientCertificateRequest";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrSSLClientCertificateRequest_clazz = NULL;
}  // namespace

namespace chrome {
namespace android {

static void OnSystemRequestCompletion(JNIEnv* env, jclass clazz,
    jint requestPtr,
    jobjectArray certChain,
    jobject privateKey);

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_SbrSSLClientCertificateRequest_selectClientCertificate = 0;
static jboolean
    Java_SbrSSLClientCertificateRequest_selectClientCertificate(JNIEnv* env,
    jint nativePtr,
    jobjectArray keyTypes,
    jobjectArray encodedPrincipals,
    jstring hostName,
    jint port) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrSSLClientCertificateRequest_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrSSLClientCertificateRequest_clazz,
      "selectClientCertificate",

"("
"I"
"[Ljava/lang/String;"
"[[B"
"Ljava/lang/String;"
"I"
")"
"Z",
      &g_SbrSSLClientCertificateRequest_selectClientCertificate);

  jboolean ret =
    env->CallStaticBooleanMethod(g_SbrSSLClientCertificateRequest_clazz,
      method_id, nativePtr, keyTypes, encodedPrincipals, hostName, port);
  base::android::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrSSLClientCertificateRequest_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kSbrSSLClientCertificateRequestClassPath).obj()));
  static const JNINativeMethod kMethodsSbrSSLClientCertificateRequest[] = {
    { "nativeOnSystemRequestCompletion",
"("
"I"
"[[B"
"Ljava/security/PrivateKey;"
")"
"V", reinterpret_cast<void*>(OnSystemRequestCompletion) },
  };
  const int kMethodsSbrSSLClientCertificateRequestSize =
      arraysize(kMethodsSbrSSLClientCertificateRequest);

  if (env->RegisterNatives(g_SbrSSLClientCertificateRequest_clazz,
                           kMethodsSbrSSLClientCertificateRequest,
                           kMethodsSbrSSLClientCertificateRequestSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace android
}  // namespace chrome

#endif  // org_samsung_chrome_browser_SbrSSLClientCertificateRequest_JNI

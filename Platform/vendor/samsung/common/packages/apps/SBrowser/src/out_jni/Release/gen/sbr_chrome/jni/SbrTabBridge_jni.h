// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/chrome/browser/SbrTabBridge

#ifndef org_samsung_chrome_browser_SbrTabBridge_JNI
#define org_samsung_chrome_browser_SbrTabBridge_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrTabBridgeClassPath[] = "org/samsung/chrome/browser/SbrTabBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrTabBridge_clazz = NULL;
}  // namespace

static jint Init(JNIEnv* env, jobject obj);

static jint RestoreStateFromByteArray(JNIEnv* env, jclass clazz,
    jbyteArray paramArrayOfByte);

static void CreateHistoricalTabFromState(JNIEnv* env, jclass clazz,
    jbyteArray paramArrayOfByte,
    jint tabIndex);

// Step 2: method stubs.
static void InitWebContents(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge,
    jobject paramContentViewCore,
    jobject paramSbrWebContentsDelegateAndroid,
    jint tabId) {
  DCHECK(nativeSbrTabBridge) << "InitWebContents";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->InitWebContents(env, obj, paramContentViewCore,
      paramSbrWebContentsDelegateAndroid, tabId);
}

static void Destroy(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "Destroy";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->Destroy(env, obj);
}

static void DestroyWebContents(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge,
    jboolean paramBoolean) {
  DCHECK(nativeSbrTabBridge) << "DestroyWebContents";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->DestroyWebContents(env, obj, paramBoolean);
}

static void TabSetWindowId(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge,
    jint windowId) {
  DCHECK(nativeSbrTabBridge) << "TabSetWindowId";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->TabSetWindowId(env, obj, windowId);
}

static void UpdateThumbnail(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge,
    jobject bitmap) {
  DCHECK(nativeSbrTabBridge) << "UpdateThumbnail";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->UpdateThumbnail(env, obj, bitmap);
}

static jstring FixupUrl(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge,
    jstring url) {
  DCHECK(nativeSbrTabBridge) << "FixupUrl";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->FixupUrl(env, obj, url).Release();
}

static void SetInterceptNavigationDelegate(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge,
    jobject ParamInterceptNavigationDelegate) {
  DCHECK(nativeSbrTabBridge) << "SetInterceptNavigationDelegate";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->SetInterceptNavigationDelegate(env, obj,
      ParamInterceptNavigationDelegate);
}

static void CreateHistoricalTab(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge,
    jint tab_index) {
  DCHECK(nativeSbrTabBridge) << "CreateHistoricalTab";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->CreateHistoricalTab(env, obj, tab_index);
}

static void SetWindowId(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge,
    jint windowId) {
  DCHECK(nativeSbrTabBridge) << "SetWindowId";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->SetWindowId(env, obj, windowId);
}

static jint GetRenderProcessPid(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "GetRenderProcessPid";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->GetRenderProcessPid(env, obj);
}

static jint GetRenderProcessPrivateSizeKBytes(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "GetRenderProcessPrivateSizeKBytes";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->GetRenderProcessPrivateSizeKBytes(env, obj);
}

static void PurgeRenderProcessNativeMemory(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "PurgeRenderProcessNativeMemory";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->PurgeRenderProcessNativeMemory(env, obj);
}

static jstring GetWebContentDisplayHost(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "GetWebContentDisplayHost";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->GetWebContentDisplayHost(env, obj).Release();
}

static void SaveTabIdForSessionSync(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "SaveTabIdForSessionSync";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->SaveTabIdForSessionSync(env, obj);
}

static void LoadUrl(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge,
    jstring url,
    jint Pagetransition,
    jint overrideUserAgent) {
  DCHECK(nativeSbrTabBridge) << "LoadUrl";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->LoadUrl(env, obj, url, Pagetransition, overrideUserAgent);
}

static void LaunchBlockedPopups(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "LaunchBlockedPopups";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->LaunchBlockedPopups(env, obj);
}

static jint GetPopupBlockedCount(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "GetPopupBlockedCount";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->GetPopupBlockedCount(env, obj);
}

static jboolean IsInitialNavigation(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "IsInitialNavigation";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->IsInitialNavigation(env, obj);
}

static jbyteArray GetStateAsByteArray(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "GetStateAsByteArray";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->GetStateAsByteArray(env, obj).Release();
}

static jobject GetFaviconBitmap(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "GetFaviconBitmap";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->GetFaviconBitmap(env, obj).Release();
}

static jint ReleaseWebContents(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "ReleaseWebContents";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->ReleaseWebContents(env, obj);
}

static jint GetWebContents(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "GetWebContents";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->GetWebContents(env, obj);
}

static void FlushPendingMessages(JNIEnv* env, jobject obj,
    jint nativeSbrTabBridge) {
  DCHECK(nativeSbrTabBridge) << "FlushPendingMessages";
  SbrTabBridge* native = reinterpret_cast<SbrTabBridge*>(nativeSbrTabBridge);
  return native->FlushPendingMessages(env, obj);
}

static base::subtle::AtomicWord g_SbrTabBridge_onReceivedHttpAuthRequest = 0;
static void Java_SbrTabBridge_onReceivedHttpAuthRequest(JNIEnv* env, jobject
    obj, jobject authHandler,
    jstring host,
    jstring realm) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrTabBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrTabBridge_clazz,
      "onReceivedHttpAuthRequest",

"("
"Lorg/chromium/chrome/browser/ChromeHttpAuthHandler;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_SbrTabBridge_onReceivedHttpAuthRequest);

  env->CallVoidMethod(obj,
      method_id, authHandler, host, realm);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrTabBridge_onDidFlushPendingMessages = 0;
static void Java_SbrTabBridge_onDidFlushPendingMessages(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrTabBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrTabBridge_clazz,
      "onDidFlushPendingMessages",

"("
")"
"V",
      &g_SbrTabBridge_onDidFlushPendingMessages);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrTabBridge_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrTabBridgeClassPath).obj()));
  static const JNINativeMethod kMethodsSbrTabBridge[] = {
    { "nativeInit",
"("
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeInitWebContents",
"("
"I"
"Lorg/chromium/content/browser/ContentViewCore;"
"Lorg/samsung/chrome/browser/SbrWebContentsDelegateAndroid;"
"I"
")"
"V", reinterpret_cast<void*>(InitWebContents) },
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeDestroyWebContents",
"("
"I"
"Z"
")"
"V", reinterpret_cast<void*>(DestroyWebContents) },
    { "nativeTabSetWindowId",
"("
"I"
"I"
")"
"V", reinterpret_cast<void*>(TabSetWindowId) },
    { "nativeUpdateThumbnail",
"("
"I"
"Landroid/graphics/Bitmap;"
")"
"V", reinterpret_cast<void*>(UpdateThumbnail) },
    { "nativeFixupUrl",
"("
"I"
"Ljava/lang/String;"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(FixupUrl) },
    { "nativeSetInterceptNavigationDelegate",
"("
"I"
"Lorg/chromium/components/navigation_interception/InterceptNavigationDelegate;"
")"
"V", reinterpret_cast<void*>(SetInterceptNavigationDelegate) },
    { "nativeCreateHistoricalTab",
"("
"I"
"I"
")"
"V", reinterpret_cast<void*>(CreateHistoricalTab) },
    { "nativeSetWindowId",
"("
"I"
"I"
")"
"V", reinterpret_cast<void*>(SetWindowId) },
    { "nativeGetRenderProcessPid",
"("
"I"
")"
"I", reinterpret_cast<void*>(GetRenderProcessPid) },
    { "nativeGetRenderProcessPrivateSizeKBytes",
"("
"I"
")"
"I", reinterpret_cast<void*>(GetRenderProcessPrivateSizeKBytes) },
    { "nativePurgeRenderProcessNativeMemory",
"("
"I"
")"
"V", reinterpret_cast<void*>(PurgeRenderProcessNativeMemory) },
    { "nativeGetWebContentDisplayHost",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetWebContentDisplayHost) },
    { "nativeSaveTabIdForSessionSync",
"("
"I"
")"
"V", reinterpret_cast<void*>(SaveTabIdForSessionSync) },
    { "nativeLoadUrl",
"("
"I"
"Ljava/lang/String;"
"I"
"I"
")"
"V", reinterpret_cast<void*>(LoadUrl) },
    { "nativeLaunchBlockedPopups",
"("
"I"
")"
"V", reinterpret_cast<void*>(LaunchBlockedPopups) },
    { "nativeGetPopupBlockedCount",
"("
"I"
")"
"I", reinterpret_cast<void*>(GetPopupBlockedCount) },
    { "nativeIsInitialNavigation",
"("
"I"
")"
"Z", reinterpret_cast<void*>(IsInitialNavigation) },
    { "nativeGetStateAsByteArray",
"("
"I"
")"
"[B", reinterpret_cast<void*>(GetStateAsByteArray) },
    { "nativeRestoreStateFromByteArray",
"("
"[B"
")"
"I", reinterpret_cast<void*>(RestoreStateFromByteArray) },
    { "nativeCreateHistoricalTabFromState",
"("
"[B"
"I"
")"
"V", reinterpret_cast<void*>(CreateHistoricalTabFromState) },
    { "nativeGetFaviconBitmap",
"("
"I"
")"
"Landroid/graphics/Bitmap;", reinterpret_cast<void*>(GetFaviconBitmap) },
    { "nativeReleaseWebContents",
"("
"I"
")"
"I", reinterpret_cast<void*>(ReleaseWebContents) },
    { "nativeGetWebContents",
"("
"I"
")"
"I", reinterpret_cast<void*>(GetWebContents) },
    { "nativeFlushPendingMessages",
"("
"I"
")"
"V", reinterpret_cast<void*>(FlushPendingMessages) },
  };
  const int kMethodsSbrTabBridgeSize = arraysize(kMethodsSbrTabBridge);

  if (env->RegisterNatives(g_SbrTabBridge_clazz,
                           kMethodsSbrTabBridge,
                           kMethodsSbrTabBridgeSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_samsung_chrome_browser_SbrTabBridge_JNI

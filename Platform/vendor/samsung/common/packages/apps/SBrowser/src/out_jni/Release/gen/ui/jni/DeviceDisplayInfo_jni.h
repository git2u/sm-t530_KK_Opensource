// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/gfx/DeviceDisplayInfo

#ifndef org_chromium_ui_gfx_DeviceDisplayInfo_JNI
#define org_chromium_ui_gfx_DeviceDisplayInfo_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kDeviceDisplayInfoClassPath[] =
    "org/chromium/ui/gfx/DeviceDisplayInfo";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_DeviceDisplayInfo_clazz = NULL;
}  // namespace

namespace gfx {

// Step 2: method stubs.

static base::subtle::AtomicWord g_DeviceDisplayInfo_getDisplayHeight = 0;
static jint Java_DeviceDisplayInfo_getDisplayHeight(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_DeviceDisplayInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_DeviceDisplayInfo_clazz,
      "getDisplayHeight",

"("
")"
"I",
      &g_DeviceDisplayInfo_getDisplayHeight);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_DeviceDisplayInfo_getDisplayWidth = 0;
static jint Java_DeviceDisplayInfo_getDisplayWidth(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_DeviceDisplayInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_DeviceDisplayInfo_clazz,
      "getDisplayWidth",

"("
")"
"I",
      &g_DeviceDisplayInfo_getDisplayWidth);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_DeviceDisplayInfo_getBitsPerPixel = 0;
static jint Java_DeviceDisplayInfo_getBitsPerPixel(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_DeviceDisplayInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_DeviceDisplayInfo_clazz,
      "getBitsPerPixel",

"("
")"
"I",
      &g_DeviceDisplayInfo_getBitsPerPixel);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_DeviceDisplayInfo_getBitsPerComponent = 0;
static jint Java_DeviceDisplayInfo_getBitsPerComponent(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_DeviceDisplayInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_DeviceDisplayInfo_clazz,
      "getBitsPerComponent",

"("
")"
"I",
      &g_DeviceDisplayInfo_getBitsPerComponent);

  jint ret =
    env->CallIntMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_DeviceDisplayInfo_getDIPScale = 0;
static jdouble Java_DeviceDisplayInfo_getDIPScale(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_DeviceDisplayInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_DeviceDisplayInfo_clazz,
      "getDIPScale",

"("
")"
"D",
      &g_DeviceDisplayInfo_getDIPScale);

  jdouble ret =
    env->CallDoubleMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_DeviceDisplayInfo_getRefreshRate = 0;
static jdouble Java_DeviceDisplayInfo_getRefreshRate(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_DeviceDisplayInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_DeviceDisplayInfo_clazz,
      "getRefreshRate",

"("
")"
"D",
      &g_DeviceDisplayInfo_getRefreshRate);

  jdouble ret =
    env->CallDoubleMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_DeviceDisplayInfo_create = 0;
static ScopedJavaLocalRef<jobject> Java_DeviceDisplayInfo_create(JNIEnv* env,
    jobject context) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_DeviceDisplayInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_DeviceDisplayInfo_clazz,
      "create",

"("
"Landroid/content/Context;"
")"
"Lorg/chromium/ui/gfx/DeviceDisplayInfo;",
      &g_DeviceDisplayInfo_create);

  jobject ret =
    env->CallStaticObjectMethod(g_DeviceDisplayInfo_clazz,
      method_id, context);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_DeviceDisplayInfo_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kDeviceDisplayInfoClassPath).obj()));
  return true;
}
}  // namespace gfx

#endif  // org_chromium_ui_gfx_DeviceDisplayInfo_JNI

// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/content/sbrowser/SbrContentSettings

#ifndef org_samsung_content_sbrowser_SbrContentSettings_JNI
#define org_samsung_content_sbrowser_SbrContentSettings_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrContentSettingsClassPath[] =
    "org/samsung/content/sbrowser/SbrContentSettings";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrContentSettings_clazz = NULL;
}  // namespace

namespace content {

static jint Init(JNIEnv* env, jobject obj,
    jint webContentsPtr);

// Step 2: method stubs.
static void SyncFromNative(JNIEnv* env, jobject obj,
    jint nativeSbrContentSettings) {
  DCHECK(nativeSbrContentSettings) << "SyncFromNative";
  SbrContentSettings* native =
      reinterpret_cast<SbrContentSettings*>(nativeSbrContentSettings);
  return native->SyncFromNative(env, obj);
}

static void SyncToNative(JNIEnv* env, jobject obj,
    jint nativeSbrContentSettings) {
  DCHECK(nativeSbrContentSettings) << "SyncToNative";
  SbrContentSettings* native =
      reinterpret_cast<SbrContentSettings*>(nativeSbrContentSettings);
  return native->SyncToNative(env, obj);
}

static base::subtle::AtomicWord
    g_SbrContentSettings_onNativeContentSettingsDestroyed = 0;
static void Java_SbrContentSettings_onNativeContentSettingsDestroyed(JNIEnv*
    env, jobject obj, jint nativeContentSettings) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentSettings_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentSettings_clazz,
      "onNativeContentSettingsDestroyed",

"("
"I"
")"
"V",
      &g_SbrContentSettings_onNativeContentSettingsDestroyed);

  env->CallVoidMethod(obj,
      method_id, nativeContentSettings);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrContentSettings_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrContentSettingsClassPath).obj()));
  static const JNINativeMethod kMethodsSbrContentSettings[] = {
    { "nativeInit",
"("
"I"
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeSyncFromNative",
"("
"I"
")"
"V", reinterpret_cast<void*>(SyncFromNative) },
    { "nativeSyncToNative",
"("
"I"
")"
"V", reinterpret_cast<void*>(SyncToNative) },
  };
  const int kMethodsSbrContentSettingsSize =
      arraysize(kMethodsSbrContentSettings);

  if (env->RegisterNatives(g_SbrContentSettings_clazz,
                           kMethodsSbrContentSettings,
                           kMethodsSbrContentSettingsSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_samsung_content_sbrowser_SbrContentSettings_JNI

// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/chrome/browser/SbrSmartcardHelper

#ifndef org_samsung_chrome_browser_SbrSmartcardHelper_JNI
#define org_samsung_chrome_browser_SbrSmartcardHelper_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrSmartcardHelperClassPath[] =
    "org/samsung/chrome/browser/SbrSmartcardHelper";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrSmartcardHelper_clazz = NULL;
}  // namespace

namespace net {

static void SetSslContextState(JNIEnv* env, jclass clazz,
    jint state,
    jstring alias);

// Step 2: method stubs.

static base::subtle::AtomicWord g_SbrSmartcardHelper_onSslContextChanged = 0;
static void Java_SbrSmartcardHelper_onSslContextChanged(JNIEnv* env, jint state)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrSmartcardHelper_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrSmartcardHelper_clazz,
      "onSslContextChanged",

"("
"I"
")"
"V",
      &g_SbrSmartcardHelper_onSslContextChanged);

  env->CallStaticVoidMethod(g_SbrSmartcardHelper_clazz,
      method_id, state);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrSmartcardHelper_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrSmartcardHelperClassPath).obj()));
  static const JNINativeMethod kMethodsSbrSmartcardHelper[] = {
    { "nativeSetSslContextState",
"("
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetSslContextState) },
  };
  const int kMethodsSbrSmartcardHelperSize =
      arraysize(kMethodsSbrSmartcardHelper);

  if (env->RegisterNatives(g_SbrSmartcardHelper_clazz,
                           kMethodsSbrSmartcardHelper,
                           kMethodsSbrSmartcardHelperSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace net

#endif  // org_samsung_chrome_browser_SbrSmartcardHelper_JNI

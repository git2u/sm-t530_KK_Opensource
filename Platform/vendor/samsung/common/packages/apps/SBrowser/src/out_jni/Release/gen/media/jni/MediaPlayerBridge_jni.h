// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/MediaPlayerBridge

#ifndef org_chromium_media_MediaPlayerBridge_JNI
#define org_chromium_media_MediaPlayerBridge_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAllowedOperationsClassPath[] =
    "org/chromium/media/MediaPlayerBridge$AllowedOperations";
const char kMediaPlayerBridgeClassPath[] =
    "org/chromium/media/MediaPlayerBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AllowedOperations_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_MediaPlayerBridge_clazz = NULL;
}  // namespace

namespace media {

// Step 2: method stubs.

static base::subtle::AtomicWord g_AllowedOperations_canPause = 0;
static jboolean Java_AllowedOperations_canPause(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AllowedOperations_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AllowedOperations_clazz,
      "canPause",

"("
")"
"Z",
      &g_AllowedOperations_canPause);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AllowedOperations_canSeekForward = 0;
static jboolean Java_AllowedOperations_canSeekForward(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AllowedOperations_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AllowedOperations_clazz,
      "canSeekForward",

"("
")"
"Z",
      &g_AllowedOperations_canSeekForward);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_AllowedOperations_canSeekBackward = 0;
static jboolean Java_AllowedOperations_canSeekBackward(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AllowedOperations_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AllowedOperations_clazz,
      "canSeekBackward",

"("
")"
"Z",
      &g_AllowedOperations_canSeekBackward);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerBridge_setDataSource = 0;
static jboolean Java_MediaPlayerBridge_setDataSource(JNIEnv* env, jobject
    player,
    jobject context,
    jstring url,
    jstring cookies,
    jboolean hideUrlLog) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_MediaPlayerBridge_clazz,
      "setDataSource",

"("
"Landroid/media/MediaPlayer;"
"Landroid/content/Context;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"Z",
      &g_MediaPlayerBridge_setDataSource);

  jboolean ret =
    env->CallStaticBooleanMethod(g_MediaPlayerBridge_clazz,
      method_id, player, context, url, cookies, hideUrlLog);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerBridge_getAllowedOperations = 0;
static ScopedJavaLocalRef<jobject>
    Java_MediaPlayerBridge_getAllowedOperations(JNIEnv* env, jobject player) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaPlayerBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_MediaPlayerBridge_clazz,
      "getAllowedOperations",

"("
"Landroid/media/MediaPlayer;"
")"
"Lorg/chromium/media/MediaPlayerBridge$AllowedOperations;",
      &g_MediaPlayerBridge_getAllowedOperations);

  jobject ret =
    env->CallStaticObjectMethod(g_MediaPlayerBridge_clazz,
      method_id, player);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AllowedOperations_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAllowedOperationsClassPath).obj()));
  g_MediaPlayerBridge_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kMediaPlayerBridgeClassPath).obj()));
  return true;
}
}  // namespace media

#endif  // org_chromium_media_MediaPlayerBridge_JNI

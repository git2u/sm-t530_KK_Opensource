// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/web_contents_delegate_android/ColorChooserAndroid

#ifndef org_chromium_components_web_contents_delegate_android_ColorChooserAndroid_JNI
#define org_chromium_components_web_contents_delegate_android_ColorChooserAndroid_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kColorChooserAndroidClassPath[] =
    "org/chromium/components/web_contents_delegate_android/ColorChooserAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ColorChooserAndroid_clazz = NULL;
}  // namespace

namespace components {

// Step 2: method stubs.
static void OnColorChosen(JNIEnv* env, jobject obj,
    jint nativeColorChooserAndroid,
    jint color) {
  DCHECK(nativeColorChooserAndroid) << "OnColorChosen";
  ColorChooserAndroid* native =
      reinterpret_cast<ColorChooserAndroid*>(nativeColorChooserAndroid);
  return native->OnColorChosen(env, obj, color);
}

static base::subtle::AtomicWord g_ColorChooserAndroid_closeColorChooser = 0;
static void Java_ColorChooserAndroid_closeColorChooser(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ColorChooserAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ColorChooserAndroid_clazz,
      "closeColorChooser",

"("
")"
"V",
      &g_ColorChooserAndroid_closeColorChooser);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ColorChooserAndroid_createColorChooserAndroid
    = 0;
static ScopedJavaLocalRef<jobject>
    Java_ColorChooserAndroid_createColorChooserAndroid(JNIEnv* env, jint
    nativeColorChooserAndroid,
    jobject contentViewCore,
    jint initialColor) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ColorChooserAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ColorChooserAndroid_clazz,
      "createColorChooserAndroid",

"("
"I"
"Lorg/chromium/content/browser/ContentViewCore;"
"I"
")"
"Lorg/chromium/components/web_contents_delegate_android/ColorChooserAndroid;",
      &g_ColorChooserAndroid_createColorChooserAndroid);

  jobject ret =
    env->CallStaticObjectMethod(g_ColorChooserAndroid_clazz,
      method_id, nativeColorChooserAndroid, contentViewCore, initialColor);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ColorChooserAndroid_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kColorChooserAndroidClassPath).obj()));
  static const JNINativeMethod kMethodsColorChooserAndroid[] = {
    { "nativeOnColorChosen",
"("
"I"
"I"
")"
"V", reinterpret_cast<void*>(OnColorChosen) },
  };
  const int kMethodsColorChooserAndroidSize =
      arraysize(kMethodsColorChooserAndroid);

  if (env->RegisterNatives(g_ColorChooserAndroid_clazz,
                           kMethodsColorChooserAndroid,
                           kMethodsColorChooserAndroidSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace components

#endif  // org_chromium_components_web_contents_delegate_android_ColorChooserAndroid_JNI

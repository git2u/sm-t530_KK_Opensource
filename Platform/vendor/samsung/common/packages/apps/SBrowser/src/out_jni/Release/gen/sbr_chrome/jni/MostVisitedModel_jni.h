// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/android/app/sbrowser/history/model/MostVisitedModel

#ifndef com_sec_android_app_sbrowser_history_model_MostVisitedModel_JNI
#define com_sec_android_app_sbrowser_history_model_MostVisitedModel_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kMostVisitedModelClassPath[] =
    "com/sec/android/app/sbrowser/history/model/MostVisitedModel";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_MostVisitedModel_clazz = NULL;
}  // namespace

static jint Init(JNIEnv* env, jobject obj);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeMostVisitedModel) {
  DCHECK(nativeMostVisitedModel) << "Destroy";
  MostVisitedModel* native =
      reinterpret_cast<MostVisitedModel*>(nativeMostVisitedModel);
  return native->Destroy(env, obj);
}

static jint GetVisitCountForURL(JNIEnv* env, jobject obj,
    jint nativeMostVisitedModel,
    jstring url) {
  DCHECK(nativeMostVisitedModel) << "GetVisitCountForURL";
  MostVisitedModel* native =
      reinterpret_cast<MostVisitedModel*>(nativeMostVisitedModel);
  return native->GetVisitCountForURL(env, obj, url);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_MostVisitedModel_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kMostVisitedModelClassPath).obj()));
  static const JNINativeMethod kMethodsMostVisitedModel[] = {
    { "nativeInit",
"("
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeGetVisitCountForURL",
"("
"I"
"Ljava/lang/String;"
")"
"I", reinterpret_cast<void*>(GetVisitCountForURL) },
  };
  const int kMethodsMostVisitedModelSize = arraysize(kMethodsMostVisitedModel);

  if (env->RegisterNatives(g_MostVisitedModel_clazz,
                           kMethodsMostVisitedModel,
                           kMethodsMostVisitedModelSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // com_sec_android_app_sbrowser_history_model_MostVisitedModel_JNI

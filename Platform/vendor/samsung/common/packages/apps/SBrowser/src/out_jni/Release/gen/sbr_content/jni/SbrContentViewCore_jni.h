// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/content/sbrowser/SbrContentViewCore

#ifndef org_samsung_content_sbrowser_SbrContentViewCore_JNI
#define org_samsung_content_sbrowser_SbrContentViewCore_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrContentViewCoreClassPath[] =
    "org/samsung/content/sbrowser/SbrContentViewCore";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrContentViewCore_clazz = NULL;
}  // namespace

namespace content {

static jint Init(JNIEnv* env, jobject obj);

// Step 2: method stubs.
static void PrintBegin(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "PrintBegin";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->PrintBegin(env, obj);
}

static void PrintPage(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint pageNum) {
  DCHECK(nativeSbrContentViewCore) << "PrintPage";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->PrintPage(env, obj, pageNum);
}

static void PrintEnd(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "PrintEnd";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->PrintEnd(env, obj);
}

static void ShowHoverFocus(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint x,
    jint y,
    jlong time_ms,
    jboolean hover_highlight) {
  DCHECK(nativeSbrContentViewCore) << "ShowHoverFocus";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->ShowHoverFocus(env, obj, x, y, time_ms, hover_highlight);
}

static jstring Accept_Headers(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "Accept_Headers";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->Accept_Headers(env, obj).Release();
}

static void RequestSelectionVisibilityStatus(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "RequestSelectionVisibilityStatus";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->RequestSelectionVisibilityStatus(env, obj);
}

static void GetSelectionRect(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "GetSelectionRect";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->GetSelectionRect(env, obj);
}

static void SetInterceptNavigationDelegate(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jobject ParamInterceptNavigationDelegate) {
  DCHECK(nativeSbrContentViewCore) << "SetInterceptNavigationDelegate";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->SetInterceptNavigationDelegate(env, obj,
      ParamInterceptNavigationDelegate);
}

static jint GetBitmapFromCompositor(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint x,
    jint y,
    jint width,
    jint height,
    jobject bitmap,
    jint imageFormat) {
  DCHECK(nativeSbrContentViewCore) << "GetBitmapFromCompositor";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->GetBitmapFromCompositor(env, obj, x, y, width, height, bitmap,
      imageFormat);
}

static void CheckBelongToSelection(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint TouchX,
    jint TouchY) {
  DCHECK(nativeSbrContentViewCore) << "CheckBelongToSelection";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->CheckBelongToSelection(env, obj, TouchX, TouchY);
}

static void GetSelectionBitmap(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "GetSelectionBitmap";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->GetSelectionBitmap(env, obj);
}

static void selectClosestWord(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint TouchX,
    jint TouchY) {
  DCHECK(nativeSbrContentViewCore) << "selectClosestWord";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->selectClosestWord(env, obj, TouchX, TouchY);
}

static void clearTextSelection(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "clearTextSelection";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->clearTextSelection(env, obj);
}

static void PerformLongPress(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jlong timeMs,
    jfloat x,
    jfloat y,
    jboolean linkPreviewTap) {
  DCHECK(nativeSbrContentViewCore) << "PerformLongPress";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->PerformLongPress(env, obj, timeMs, x, y, linkPreviewTap);
}

static void GetSelectionMarkup(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "GetSelectionMarkup";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->GetSelectionMarkup(env, obj);
}

static void Destroy(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "Destroy";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->Destroy(env, obj);
}

static void SetNativeContentView(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint contentView) {
  DCHECK(nativeSbrContentViewCore) << "SetNativeContentView";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->SetNativeContentView(env, obj, contentView);
}

static void SavePageAs(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "SavePageAs";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->SavePageAs(env, obj);
}

static void moveFocusToNext(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "moveFocusToNext";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->moveFocusToNext(env, obj);
}

static void moveFocusToPrevious(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "moveFocusToPrevious";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->moveFocusToPrevious(env, obj);
}

static void OnCustomMenuAction(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint action) {
  DCHECK(nativeSbrContentViewCore) << "OnCustomMenuAction";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->OnCustomMenuAction(env, obj, action);
}

static void GetSelectionContext(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jboolean shouldUpdateSelectionContext) {
  DCHECK(nativeSbrContentViewCore) << "GetSelectionContext";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->GetSelectionContext(env, obj, shouldUpdateSelectionContext);
}

static void UpdateSelection(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jstring old_query,
    jstring new_query) {
  DCHECK(nativeSbrContentViewCore) << "UpdateSelection";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->UpdateSelection(env, obj, old_query, new_query);
}

static void RestoreSelection(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "RestoreSelection";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->RestoreSelection(env, obj);
}

static void ClearSelection(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "ClearSelection";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->ClearSelection(env, obj);
}

static jboolean IsWMLPage(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore) {
  DCHECK(nativeSbrContentViewCore) << "IsWMLPage";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->IsWMLPage(env, obj);
}

static void LoadDataWithBaseUrl(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jstring data,
    jstring baseurl,
    jstring mime_type,
    jstring encoding,
    jstring historyurl) {
  DCHECK(nativeSbrContentViewCore) << "LoadDataWithBaseUrl";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->LoadDataWithBaseUrl(env, obj, data, baseurl, mime_type,
      encoding, historyurl);
}

static void GetScrapBitmap(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint bitmapWidth,
    jint bitmapHeight) {
  DCHECK(nativeSbrContentViewCore) << "GetScrapBitmap";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->GetScrapBitmap(env, obj, bitmapWidth, bitmapHeight);
}

static void GetSmartClipData(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint x,
    jint y,
    jint w,
    jint h) {
  DCHECK(nativeSbrContentViewCore) << "GetSmartClipData";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->GetSmartClipData(env, obj, x, y, w, h);
}

static void HideUrlBarCmdReq(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint cmd,
    jobject urlbar_bitmap,
    jboolean urlbar_active,
    jboolean override_allowed) {
  DCHECK(nativeSbrContentViewCore) << "HideUrlBarCmdReq";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->HideUrlBarCmdReq(env, obj, cmd, urlbar_bitmap, urlbar_active,
      override_allowed);
}

static void ScrollEditWithCursor(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint scrollX) {
  DCHECK(nativeSbrContentViewCore) << "ScrollEditWithCursor";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->ScrollEditWithCursor(env, obj, scrollX);
}

static void HandleSelectionDrop(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint x,
    jint y,
    jstring text) {
  DCHECK(nativeSbrContentViewCore) << "HandleSelectionDrop";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->HandleSelectionDrop(env, obj, x, y, text);
}

static void SbrScrollBy(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jlong timeMs,
    jint x,
    jint y,
    jfloat deltaX,
    jfloat deltaY,
    jboolean lastInputEventForVSync) {
  DCHECK(nativeSbrContentViewCore) << "SbrScrollBy";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->SbrScrollBy(env, obj, timeMs, x, y, deltaX, deltaY,
      lastInputEventForVSync);
}

static void SbrScrollBegin(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jlong timeMs,
    jfloat x,
    jfloat y) {
  DCHECK(nativeSbrContentViewCore) << "SbrScrollBegin";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->SbrScrollBegin(env, obj, timeMs, x, y);
}

static void SbrScrollEnd(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jlong timeMs) {
  DCHECK(nativeSbrContentViewCore) << "SbrScrollEnd";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->SbrScrollEnd(env, obj, timeMs);
}

static void SetPasswordEcho(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jboolean pwdEchoEnabled) {
  DCHECK(nativeSbrContentViewCore) << "SetPasswordEcho";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->SetPasswordEcho(env, obj, pwdEchoEnabled);
}

static void performLongClickOnFocussedNode(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jlong time_ms) {
  DCHECK(nativeSbrContentViewCore) << "performLongClickOnFocussedNode";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->performLongClickOnFocussedNode(env, obj, time_ms);
}

static void ReCaptureSoftBitmap(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint x,
    jint y,
    jint height,
    jfloat pageScaleFactor,
    jboolean isPageLoadFinish) {
  DCHECK(nativeSbrContentViewCore) << "ReCaptureSoftBitmap";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->ReCaptureSoftBitmap(env, obj, x, y, height, pageScaleFactor,
      isPageLoadFinish);
}

static void RecognizeArticle(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint mode) {
  DCHECK(nativeSbrContentViewCore) << "RecognizeArticle";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->RecognizeArticle(env, obj, mode);
}

static void HandleMouseClickWithCtrlkey(JNIEnv* env, jobject obj,
    jint nativeSbrContentViewCore,
    jint x,
    jint y) {
  DCHECK(nativeSbrContentViewCore) << "HandleMouseClickWithCtrlkey";
  SbrContentViewCore* native =
      reinterpret_cast<SbrContentViewCore*>(nativeSbrContentViewCore);
  return native->HandleMouseClickWithCtrlkey(env, obj, x, y);
}

static base::subtle::AtomicWord g_SbrContentViewCore_UpdateSoftBitmap = 0;
static void Java_SbrContentViewCore_UpdateSoftBitmap(JNIEnv* env, jobject obj,
    jobject softBitmap) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "UpdateSoftBitmap",

"("
"Landroid/graphics/Bitmap;"
")"
"V",
      &g_SbrContentViewCore_UpdateSoftBitmap);

  env->CallVoidMethod(obj,
      method_id, softBitmap);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_UpdateReCaptureSoftBitmap =
    0;
static void Java_SbrContentViewCore_UpdateReCaptureSoftBitmap(JNIEnv* env,
    jobject obj, jobject softBitmap,
    jboolean fromPageLoadFinish) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "UpdateReCaptureSoftBitmap",

"("
"Landroid/graphics/Bitmap;"
"Z"
")"
"V",
      &g_SbrContentViewCore_UpdateReCaptureSoftBitmap);

  env->CallVoidMethod(obj,
      method_id, softBitmap, fromPageLoadFinish);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onNativeDestroyed = 0;
static void Java_SbrContentViewCore_onNativeDestroyed(JNIEnv* env, jobject obj,
    jint nSbrContentViewCore) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onNativeDestroyed",

"("
"I"
")"
"V",
      &g_SbrContentViewCore_onNativeDestroyed);

  env->CallVoidMethod(obj,
      method_id, nSbrContentViewCore);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrContentViewCore_getTabDragAndDropIsInProgress = 0;
static jboolean Java_SbrContentViewCore_getTabDragAndDropIsInProgress(JNIEnv*
    env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "getTabDragAndDropIsInProgress",

"("
")"
"Z",
      &g_SbrContentViewCore_getTabDragAndDropIsInProgress);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_SbrContentViewCore_onSelectionContextExtracted
    = 0;
static void Java_SbrContentViewCore_onSelectionContextExtracted(JNIEnv* env,
    jobject obj, jobject selectionContext) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onSelectionContextExtracted",

"("
"Landroid/os/Bundle;"
")"
"V",
      &g_SbrContentViewCore_onSelectionContextExtracted);

  env->CallVoidMethod(obj,
      method_id, selectionContext);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_selectPopupClose = 0;
static void Java_SbrContentViewCore_selectPopupClose(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "selectPopupClose",

"("
")"
"V",
      &g_SbrContentViewCore_selectPopupClose);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_selectPopupEmpty = 0;
static void Java_SbrContentViewCore_selectPopupEmpty(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "selectPopupEmpty",

"("
")"
"V",
      &g_SbrContentViewCore_selectPopupEmpty);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_scrapPageSavedFileName = 0;
static void Java_SbrContentViewCore_scrapPageSavedFileName(JNIEnv* env, jobject
    obj, jstring fileName) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "scrapPageSavedFileName",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SbrContentViewCore_scrapPageSavedFileName);

  env->CallVoidMethod(obj,
      method_id, fileName);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onBitmapForScrap = 0;
static void Java_SbrContentViewCore_onBitmapForScrap(JNIEnv* env, jobject obj,
    jobject scrapBitmap,
    jboolean response) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onBitmapForScrap",

"("
"Landroid/graphics/Bitmap;"
"Z"
")"
"V",
      &g_SbrContentViewCore_onBitmapForScrap);

  env->CallVoidMethod(obj,
      method_id, scrapBitmap, response);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrContentViewCore_onSetBingSearchEngineAsDefault = 0;
static void Java_SbrContentViewCore_onSetBingSearchEngineAsDefault(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onSetBingSearchEngineAsDefault",

"("
")"
"V",
      &g_SbrContentViewCore_onSetBingSearchEngineAsDefault);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_setBitmapForDragging = 0;
static void Java_SbrContentViewCore_setBitmapForDragging(JNIEnv* env, jobject
    obj, jobject bmp,
    jint width,
    jint height) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "setBitmapForDragging",

"("
"Landroid/graphics/Bitmap;"
"I"
"I"
")"
"V",
      &g_SbrContentViewCore_setBitmapForDragging);

  env->CallVoidMethod(obj,
      method_id, bmp, width, height);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onBitmapForPrint = 0;
static void Java_SbrContentViewCore_onBitmapForPrint(JNIEnv* env, jobject obj,
    jobject printBitmap,
    jint responseCode) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onBitmapForPrint",

"("
"Landroid/graphics/Bitmap;"
"I"
")"
"V",
      &g_SbrContentViewCore_onBitmapForPrint);

  env->CallVoidMethod(obj,
      method_id, printBitmap, responseCode);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onCheckFPAuth = 0;
static jboolean Java_SbrContentViewCore_onCheckFPAuth(JNIEnv* env, jobject obj)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onCheckFPAuth",

"("
")"
"Z",
      &g_SbrContentViewCore_onCheckFPAuth);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_SbrContentViewCore_OnLaunchFingerPrintActivity
    = 0;
static void Java_SbrContentViewCore_OnLaunchFingerPrintActivity(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "OnLaunchFingerPrintActivity",

"("
")"
"V",
      &g_SbrContentViewCore_OnLaunchFingerPrintActivity);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onPrintBegin = 0;
static void Java_SbrContentViewCore_onPrintBegin(JNIEnv* env, jobject obj, jint
    totalPageCount) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onPrintBegin",

"("
"I"
")"
"V",
      &g_SbrContentViewCore_onPrintBegin);

  env->CallVoidMethod(obj,
      method_id, totalPageCount);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_SelectedBitmap = 0;
static void Java_SbrContentViewCore_SelectedBitmap(JNIEnv* env, jobject obj,
    jobject bitmap) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "SelectedBitmap",

"("
"Landroid/graphics/Bitmap;"
")"
"V",
      &g_SbrContentViewCore_SelectedBitmap);

  env->CallVoidMethod(obj,
      method_id, bitmap);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_NotifyAutofillBegin = 0;
static void Java_SbrContentViewCore_NotifyAutofillBegin(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "NotifyAutofillBegin",

"("
")"
"V",
      &g_SbrContentViewCore_NotifyAutofillBegin);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_PointOnRegion = 0;
static void Java_SbrContentViewCore_PointOnRegion(JNIEnv* env, jobject obj,
    jboolean isOnRegion) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "PointOnRegion",

"("
"Z"
")"
"V",
      &g_SbrContentViewCore_PointOnRegion);

  env->CallVoidMethod(obj,
      method_id, isOnRegion);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_setSelectionVisibilty = 0;
static void Java_SbrContentViewCore_setSelectionVisibilty(JNIEnv* env, jobject
    obj, jboolean isVisible) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "setSelectionVisibilty",

"("
"Z"
")"
"V",
      &g_SbrContentViewCore_setSelectionVisibilty);

  env->CallVoidMethod(obj,
      method_id, isVisible);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_updateCurrentSelectionRect
    = 0;
static void Java_SbrContentViewCore_updateCurrentSelectionRect(JNIEnv* env,
    jobject obj, jint x,
    jint y,
    jint width,
    jint height) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "updateCurrentSelectionRect",

"("
"I"
"I"
"I"
"I"
")"
"V",
      &g_SbrContentViewCore_updateCurrentSelectionRect);

  env->CallVoidMethod(obj,
      method_id, x, y, width, height);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_SelectedMarkup = 0;
static void Java_SbrContentViewCore_SelectedMarkup(JNIEnv* env, jobject obj,
    jstring markup) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "SelectedMarkup",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SbrContentViewCore_SelectedMarkup);

  env->CallVoidMethod(obj,
      method_id, markup);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_showSelectPopup = 0;
static void Java_SbrContentViewCore_showSelectPopup(JNIEnv* env, jobject obj,
    jobjectArray items,
    jintArray enabled,
    jboolean multiple,
    jintArray selectedIndices,
    jint privateIMEOptions) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "showSelectPopup",

"("
"[Ljava/lang/String;"
"[I"
"Z"
"[I"
"I"
")"
"V",
      &g_SbrContentViewCore_showSelectPopup);

  env->CallVoidMethod(obj,
      method_id, items, enabled, multiple, selectedIndices, privateIMEOptions);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_updateImeAdapter = 0;
static void Java_SbrContentViewCore_updateImeAdapter(JNIEnv* env, jobject obj,
    jint nativeImeAdapterAndroid,
    jint textInputType,
    jstring text,
    jint selectionStart,
    jint selectionEnd,
    jint compositionStart,
    jint compositionEnd,
    jboolean showImeIfNeeded,
    jint privateIMEOptions,
    jboolean spellCheckingEnabled) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "updateImeAdapter",

"("
"I"
"I"
"Ljava/lang/String;"
"I"
"I"
"I"
"I"
"Z"
"I"
"Z"
")"
"V",
      &g_SbrContentViewCore_updateImeAdapter);

  env->CallVoidMethod(obj,
      method_id, nativeImeAdapterAndroid, textInputType, text, selectionStart,
          selectionEnd, compositionStart, compositionEnd, showImeIfNeeded,
          privateIMEOptions, spellCheckingEnabled);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onSmartClipDataExtracted =
    0;
static void Java_SbrContentViewCore_onSmartClipDataExtracted(JNIEnv* env,
    jobject obj, jstring result) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onSmartClipDataExtracted",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SbrContentViewCore_onSmartClipDataExtracted);

  env->CallVoidMethod(obj,
      method_id, result);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_addCustomItem = 0;
static void Java_SbrContentViewCore_addCustomItem(JNIEnv* env, jobject obj,
    jstring label,
    jint action) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "addCustomItem",

"("
"Ljava/lang/String;"
"I"
")"
"V",
      &g_SbrContentViewCore_addCustomItem);

  env->CallVoidMethod(obj,
      method_id, label, action);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_showContextMenu = 0;
static void Java_SbrContentViewCore_showContextMenu(JNIEnv* env, jobject obj,
    jobject contextMenuInfo) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "showContextMenu",

"("
"Lorg/samsung/content/sbrowser/SbrContentViewCore$SbrContentViewCoreContextMenuInfo;"
")"
"V",
      &g_SbrContentViewCore_showContextMenu);

  env->CallVoidMethod(obj,
      method_id, contextMenuInfo);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_notifyHideUrlBarEvent = 0;
static void Java_SbrContentViewCore_notifyHideUrlBarEvent(JNIEnv* env, jobject
    obj, jint event,
    jint event_data1,
    jint event_data2) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "notifyHideUrlBarEvent",

"("
"I"
"I"
"I"
")"
"V",
      &g_SbrContentViewCore_notifyHideUrlBarEvent);

  env->CallVoidMethod(obj,
      method_id, event, event_data1, event_data2);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_showMagnifierPopUp = 0;
static void Java_SbrContentViewCore_showMagnifierPopUp(JNIEnv* env, jobject obj,
    jobject rect) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "showMagnifierPopUp",

"("
"Landroid/graphics/Rect;"
")"
"V",
      &g_SbrContentViewCore_showMagnifierPopUp);

  env->CallVoidMethod(obj,
      method_id, rect);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_OnTextFieldBoundsChanged =
    0;
static void Java_SbrContentViewCore_OnTextFieldBoundsChanged(JNIEnv* env,
    jobject obj, jint left,
    jint top,
    jint right,
    jint bottom,
    jboolean isTextScrollable) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "OnTextFieldBoundsChanged",

"("
"I"
"I"
"I"
"I"
"Z"
")"
"V",
      &g_SbrContentViewCore_OnTextFieldBoundsChanged);

  env->CallVoidMethod(obj,
      method_id, left, top, right, bottom, isTextScrollable);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_OnOpenUrlInNewTab = 0;
static void Java_SbrContentViewCore_OnOpenUrlInNewTab(JNIEnv* env, jobject obj,
    jstring mouseClickurl) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "OnOpenUrlInNewTab",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SbrContentViewCore_OnOpenUrlInNewTab);

  env->CallVoidMethod(obj,
      method_id, mouseClickurl);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrContentViewCore_onRecognizeArticleResult =
    0;
static void Java_SbrContentViewCore_onRecognizeArticleResult(JNIEnv* env,
    jobject obj, jboolean isArticle) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrContentViewCore_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrContentViewCore_clazz,
      "onRecognizeArticleResult",

"("
"Z"
")"
"V",
      &g_SbrContentViewCore_onRecognizeArticleResult);

  env->CallVoidMethod(obj,
      method_id, isArticle);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrContentViewCore_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrContentViewCoreClassPath).obj()));
  static const JNINativeMethod kMethodsSbrContentViewCore[] = {
    { "nativePrintBegin",
"("
"I"
")"
"V", reinterpret_cast<void*>(PrintBegin) },
    { "nativePrintPage",
"("
"I"
"I"
")"
"V", reinterpret_cast<void*>(PrintPage) },
    { "nativePrintEnd",
"("
"I"
")"
"V", reinterpret_cast<void*>(PrintEnd) },
    { "nativeShowHoverFocus",
"("
"I"
"I"
"I"
"J"
"Z"
")"
"V", reinterpret_cast<void*>(ShowHoverFocus) },
    { "nativeAccept_Headers",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(Accept_Headers) },
    { "nativeRequestSelectionVisibilityStatus",
"("
"I"
")"
"V", reinterpret_cast<void*>(RequestSelectionVisibilityStatus) },
    { "nativeGetSelectionRect",
"("
"I"
")"
"V", reinterpret_cast<void*>(GetSelectionRect) },
    { "nativeSetInterceptNavigationDelegate",
"("
"I"
"Lorg/chromium/components/navigation_interception/InterceptNavigationDelegate;"
")"
"V", reinterpret_cast<void*>(SetInterceptNavigationDelegate) },
    { "nativeGetBitmapFromCompositor",
"("
"I"
"I"
"I"
"I"
"I"
"Landroid/graphics/Bitmap;"
"I"
")"
"I", reinterpret_cast<void*>(GetBitmapFromCompositor) },
    { "nativeCheckBelongToSelection",
"("
"I"
"I"
"I"
")"
"V", reinterpret_cast<void*>(CheckBelongToSelection) },
    { "nativeGetSelectionBitmap",
"("
"I"
")"
"V", reinterpret_cast<void*>(GetSelectionBitmap) },
    { "nativeselectClosestWord",
"("
"I"
"I"
"I"
")"
"V", reinterpret_cast<void*>(selectClosestWord) },
    { "nativeclearTextSelection",
"("
"I"
")"
"V", reinterpret_cast<void*>(clearTextSelection) },
    { "nativePerformLongPress",
"("
"I"
"J"
"F"
"F"
"Z"
")"
"V", reinterpret_cast<void*>(PerformLongPress) },
    { "nativeGetSelectionMarkup",
"("
"I"
")"
"V", reinterpret_cast<void*>(GetSelectionMarkup) },
    { "nativeInit",
"("
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeSetNativeContentView",
"("
"I"
"I"
")"
"V", reinterpret_cast<void*>(SetNativeContentView) },
    { "nativeSavePageAs",
"("
"I"
")"
"V", reinterpret_cast<void*>(SavePageAs) },
    { "nativemoveFocusToNext",
"("
"I"
")"
"V", reinterpret_cast<void*>(moveFocusToNext) },
    { "nativemoveFocusToPrevious",
"("
"I"
")"
"V", reinterpret_cast<void*>(moveFocusToPrevious) },
    { "nativeOnCustomMenuAction",
"("
"I"
"I"
")"
"V", reinterpret_cast<void*>(OnCustomMenuAction) },
    { "nativeGetSelectionContext",
"("
"I"
"Z"
")"
"V", reinterpret_cast<void*>(GetSelectionContext) },
    { "nativeUpdateSelection",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(UpdateSelection) },
    { "nativeRestoreSelection",
"("
"I"
")"
"V", reinterpret_cast<void*>(RestoreSelection) },
    { "nativeClearSelection",
"("
"I"
")"
"V", reinterpret_cast<void*>(ClearSelection) },
    { "nativeIsWMLPage",
"("
"I"
")"
"Z", reinterpret_cast<void*>(IsWMLPage) },
    { "nativeLoadDataWithBaseUrl",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(LoadDataWithBaseUrl) },
    { "nativeGetScrapBitmap",
"("
"I"
"I"
"I"
")"
"V", reinterpret_cast<void*>(GetScrapBitmap) },
    { "nativeGetSmartClipData",
"("
"I"
"I"
"I"
"I"
"I"
")"
"V", reinterpret_cast<void*>(GetSmartClipData) },
    { "nativeHideUrlBarCmdReq",
"("
"I"
"I"
"Landroid/graphics/Bitmap;"
"Z"
"Z"
")"
"V", reinterpret_cast<void*>(HideUrlBarCmdReq) },
    { "nativeScrollEditWithCursor",
"("
"I"
"I"
")"
"V", reinterpret_cast<void*>(ScrollEditWithCursor) },
    { "nativeHandleSelectionDrop",
"("
"I"
"I"
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(HandleSelectionDrop) },
    { "nativeSbrScrollBy",
"("
"I"
"J"
"I"
"I"
"F"
"F"
"Z"
")"
"V", reinterpret_cast<void*>(SbrScrollBy) },
    { "nativeSbrScrollBegin",
"("
"I"
"J"
"F"
"F"
")"
"V", reinterpret_cast<void*>(SbrScrollBegin) },
    { "nativeSbrScrollEnd",
"("
"I"
"J"
")"
"V", reinterpret_cast<void*>(SbrScrollEnd) },
    { "nativeSetPasswordEcho",
"("
"I"
"Z"
")"
"V", reinterpret_cast<void*>(SetPasswordEcho) },
    { "nativeperformLongClickOnFocussedNode",
"("
"I"
"J"
")"
"V", reinterpret_cast<void*>(performLongClickOnFocussedNode) },
    { "nativeReCaptureSoftBitmap",
"("
"I"
"I"
"I"
"I"
"F"
"Z"
")"
"V", reinterpret_cast<void*>(ReCaptureSoftBitmap) },
    { "nativeRecognizeArticle",
"("
"I"
"I"
")"
"V", reinterpret_cast<void*>(RecognizeArticle) },
    { "nativeHandleMouseClickWithCtrlkey",
"("
"I"
"I"
"I"
")"
"V", reinterpret_cast<void*>(HandleMouseClickWithCtrlkey) },
  };
  const int kMethodsSbrContentViewCoreSize =
      arraysize(kMethodsSbrContentViewCore);

  if (env->RegisterNatives(g_SbrContentViewCore_clazz,
                           kMethodsSbrContentViewCore,
                           kMethodsSbrContentViewCoreSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_samsung_content_sbrowser_SbrContentViewCore_JNI

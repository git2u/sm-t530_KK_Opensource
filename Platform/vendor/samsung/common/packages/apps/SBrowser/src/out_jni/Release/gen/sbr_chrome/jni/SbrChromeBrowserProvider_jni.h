// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/chrome/browser/SbrChromeBrowserProvider

#ifndef org_samsung_chrome_browser_SbrChromeBrowserProvider_JNI
#define org_samsung_chrome_browser_SbrChromeBrowserProvider_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrBookmarkNodeClassPath[] =
    "org/samsung/chrome/browser/SbrChromeBrowserProvider$SbrBookmarkNode";
const char kSbrChromeBrowserProviderClassPath[] =
    "org/samsung/chrome/browser/SbrChromeBrowserProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrBookmarkNode_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrChromeBrowserProvider_clazz = NULL;
}  // namespace

static jint Init(JNIEnv* env, jobject obj);

static jlong IsURLBookmarked(JNIEnv* env, jclass clazz,
    jstring url);

static jlong IsBookmarkEditable(JNIEnv* env, jclass clazz,
    jstring url);

static jstring GetNativeBookmarkURL(JNIEnv* env, jclass clazz,
    jstring url);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider) {
  DCHECK(nativeSbrChromeBrowserProvider) << "Destroy";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->Destroy(env, obj);
}

static jlong MoveBookmark(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider,
    jlong id,
    jlong parentId,
    jlong index) {
  DCHECK(nativeSbrChromeBrowserProvider) << "MoveBookmark";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->MoveBookmark(env, obj, id, parentId, index);
}

static void SetMyDevice(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider,
    jlong myDeviceId) {
  DCHECK(nativeSbrChromeBrowserProvider) << "SetMyDevice";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->SetMyDevice(env, obj, myDeviceId);
}

static jobject GetBookmarkedNodeForURL(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider,
    jstring url) {
  DCHECK(nativeSbrChromeBrowserProvider) << "GetBookmarkedNodeForURL";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->GetBookmarkedNodeForURL(env, obj, url).Release();
}

static jobject GetBookmarknodeForId(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider,
    jlong id) {
  DCHECK(nativeSbrChromeBrowserProvider) << "GetBookmarknodeForId";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->GetBookmarknodeForId(env, obj, id).Release();
}

static jlong IsValidURL(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider,
    jstring url) {
  DCHECK(nativeSbrChromeBrowserProvider) << "IsValidURL";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->IsValidURL(env, obj, url);
}

static jint GetBookmarkURLNodeCount(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider) {
  DCHECK(nativeSbrChromeBrowserProvider) << "GetBookmarkURLNodeCount";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->GetBookmarkURLNodeCount(env, obj);
}

static void UpdateMyDeviceTitle(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider,
    jlong parentId,
    jstring title) {
  DCHECK(nativeSbrChromeBrowserProvider) << "UpdateMyDeviceTitle";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->UpdateMyDeviceTitle(env, obj, parentId, title);
}

static jlong AddSCloudSyncBookmark(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider,
    jstring url,
    jstring title,
    jboolean isFolder,
    jlong parentId,
    jlong isEditable) {
  DCHECK(nativeSbrChromeBrowserProvider) << "AddSCloudSyncBookmark";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->AddSCloudSyncBookmark(env, obj, url, title, isFolder, parentId,
      isEditable);
}

static jbyteArray GetURLThumbnail(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider,
    jstring url) {
  DCHECK(nativeSbrChromeBrowserProvider) << "GetURLThumbnail";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->GetURLThumbnail(env, obj, url).Release();
}

static jlong AddOperatorBookmark(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider,
    jstring url,
    jstring title,
    jboolean isFolder,
    jlong parentId,
    jlong editable,
    jlong operatorBookmark) {
  DCHECK(nativeSbrChromeBrowserProvider) << "AddOperatorBookmark";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->AddOperatorBookmark(env, obj, url, title, isFolder, parentId,
      editable, operatorBookmark);
}

static jint RemoveAllOldOperatorBookmarks(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider) {
  DCHECK(nativeSbrChromeBrowserProvider) << "RemoveAllOldOperatorBookmarks";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->RemoveAllOldOperatorBookmarks(env, obj);
}

static jboolean IsOperatorBookmark(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider,
    jlong id) {
  DCHECK(nativeSbrChromeBrowserProvider) << "IsOperatorBookmark";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->IsOperatorBookmark(env, obj, id);
}

static void ConvertOperatorBookmarkAsUserBookmark(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider,
    jlong id) {
  DCHECK(nativeSbrChromeBrowserProvider) <<
      "ConvertOperatorBookmarkAsUserBookmark";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->ConvertOperatorBookmarkAsUserBookmark(env, obj, id);
}

static jboolean IsOperatorBookmarkEditable(JNIEnv* env, jobject obj,
    jint nativeSbrChromeBrowserProvider,
    jlong id) {
  DCHECK(nativeSbrChromeBrowserProvider) << "IsOperatorBookmarkEditable";
  SbrChromeBrowserProvider* native =
      reinterpret_cast<SbrChromeBrowserProvider*>(nativeSbrChromeBrowserProvider);
  return native->IsOperatorBookmarkEditable(env, obj, id);
}

static base::subtle::AtomicWord g_SbrBookmarkNode_create = 0;
static ScopedJavaLocalRef<jobject> Java_SbrBookmarkNode_create(JNIEnv* env,
    jlong id,
    jint type,
    jstring name,
    jstring url,
    jobject parent,
    jlong editable,
    jlong operatorBookmark) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrBookmarkNode_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrBookmarkNode_clazz,
      "create",

"("
"J"
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Lorg/chromium/chrome/browser/ChromeBrowserProvider$BookmarkNode;"
"J"
"J"
")"
"Lorg/chromium/chrome/browser/ChromeBrowserProvider$BookmarkNode;",
      &g_SbrBookmarkNode_create);

  jobject ret =
    env->CallStaticObjectMethod(g_SbrBookmarkNode_clazz,
      method_id, id, type, name, url, parent, editable, operatorBookmark);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SbrChromeBrowserProvider_onHistoryDataChanged
    = 0;
static void Java_SbrChromeBrowserProvider_onHistoryDataChanged(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrChromeBrowserProvider_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrChromeBrowserProvider_clazz,
      "onHistoryDataChanged",

"("
")"
"V",
      &g_SbrChromeBrowserProvider_onHistoryDataChanged);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrBookmarkNode_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrBookmarkNodeClassPath).obj()));
  g_SbrChromeBrowserProvider_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrChromeBrowserProviderClassPath).obj()));
  static const JNINativeMethod kMethodsSbrChromeBrowserProvider[] = {
    { "nativeInit",
"("
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeMoveBookmark",
"("
"I"
"J"
"J"
"J"
")"
"J", reinterpret_cast<void*>(MoveBookmark) },
    { "nativeSetMyDevice",
"("
"I"
"J"
")"
"V", reinterpret_cast<void*>(SetMyDevice) },
    { "nativeGetBookmarkedNodeForURL",
"("
"I"
"Ljava/lang/String;"
")"
"Lorg/chromium/chrome/browser/ChromeBrowserProvider$BookmarkNode;",
    reinterpret_cast<void*>(GetBookmarkedNodeForURL) },
    { "nativeIsURLBookmarked",
"("
"Ljava/lang/String;"
")"
"J", reinterpret_cast<void*>(IsURLBookmarked) },
    { "nativeGetBookmarknodeForId",
"("
"I"
"J"
")"
"Lorg/chromium/chrome/browser/ChromeBrowserProvider$BookmarkNode;",
    reinterpret_cast<void*>(GetBookmarknodeForId) },
    { "nativeIsBookmarkEditable",
"("
"Ljava/lang/String;"
")"
"J", reinterpret_cast<void*>(IsBookmarkEditable) },
    { "nativeIsValidURL",
"("
"I"
"Ljava/lang/String;"
")"
"J", reinterpret_cast<void*>(IsValidURL) },
    { "nativeGetBookmarkURLNodeCount",
"("
"I"
")"
"I", reinterpret_cast<void*>(GetBookmarkURLNodeCount) },
    { "nativeUpdateMyDeviceTitle",
"("
"I"
"J"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(UpdateMyDeviceTitle) },
    { "nativeAddSCloudSyncBookmark",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
"J"
"J"
")"
"J", reinterpret_cast<void*>(AddSCloudSyncBookmark) },
    { "nativeGetURLThumbnail",
"("
"I"
"Ljava/lang/String;"
")"
"[B", reinterpret_cast<void*>(GetURLThumbnail) },
    { "nativeAddOperatorBookmark",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
"J"
"J"
"J"
")"
"J", reinterpret_cast<void*>(AddOperatorBookmark) },
    { "nativeRemoveAllOldOperatorBookmarks",
"("
"I"
")"
"I", reinterpret_cast<void*>(RemoveAllOldOperatorBookmarks) },
    { "nativeIsOperatorBookmark",
"("
"I"
"J"
")"
"Z", reinterpret_cast<void*>(IsOperatorBookmark) },
    { "nativeConvertOperatorBookmarkAsUserBookmark",
"("
"I"
"J"
")"
"V", reinterpret_cast<void*>(ConvertOperatorBookmarkAsUserBookmark) },
    { "nativeIsOperatorBookmarkEditable",
"("
"I"
"J"
")"
"Z", reinterpret_cast<void*>(IsOperatorBookmarkEditable) },
    { "nativeGetNativeBookmarkURL",
"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetNativeBookmarkURL) },
  };
  const int kMethodsSbrChromeBrowserProviderSize =
      arraysize(kMethodsSbrChromeBrowserProvider);

  if (env->RegisterNatives(g_SbrChromeBrowserProvider_clazz,
                           kMethodsSbrChromeBrowserProvider,
                           kMethodsSbrChromeBrowserProviderSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_samsung_chrome_browser_SbrChromeBrowserProvider_JNI

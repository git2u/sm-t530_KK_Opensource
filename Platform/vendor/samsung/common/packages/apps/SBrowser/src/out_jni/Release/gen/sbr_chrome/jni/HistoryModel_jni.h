// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/android/app/sbrowser/history/model/HistoryModel

#ifndef com_sec_android_app_sbrowser_history_model_HistoryModel_JNI
#define com_sec_android_app_sbrowser_history_model_HistoryModel_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kHistoryModelClassPath[] =
    "com/sec/android/app/sbrowser/history/model/HistoryModel";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_HistoryModel_clazz = NULL;
}  // namespace

static jint Init(JNIEnv* env, jobject obj);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeHistoryModel) {
  DCHECK(nativeHistoryModel) << "Destroy";
  HistoryModel* native = reinterpret_cast<HistoryModel*>(nativeHistoryModel);
  return native->Destroy(env, obj);
}

static void GetAllHistory(JNIEnv* env, jobject obj,
    jint nativeHistoryModel,
    jint offset,
    jint range,
    jdouble end_time,
    jint max_count) {
  DCHECK(nativeHistoryModel) << "GetAllHistory";
  HistoryModel* native = reinterpret_cast<HistoryModel*>(nativeHistoryModel);
  return native->GetAllHistory(env, obj, offset, range, end_time, max_count);
}

static void ClearAllHistory(JNIEnv* env, jobject obj,
    jint nativeHistoryModel) {
  DCHECK(nativeHistoryModel) << "ClearAllHistory";
  HistoryModel* native = reinterpret_cast<HistoryModel*>(nativeHistoryModel);
  return native->ClearAllHistory(env, obj);
}

static void SearchHistory(JNIEnv* env, jobject obj,
    jint nativeHistoryModel,
    jstring value) {
  DCHECK(nativeHistoryModel) << "SearchHistory";
  HistoryModel* native = reinterpret_cast<HistoryModel*>(nativeHistoryModel);
  return native->SearchHistory(env, obj, value);
}

static base::subtle::AtomicWord g_HistoryModel_SetAllHistory = 0;
static void Java_HistoryModel_SetAllHistory(JNIEnv* env, jobject obj,
    jobjectArray result) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_HistoryModel_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_HistoryModel_clazz,
      "SetAllHistory",

"("
"[Ljava/util/HashMap;"
")"
"V",
      &g_HistoryModel_SetAllHistory);

  env->CallVoidMethod(obj,
      method_id, result);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_HistoryModel_notifyHistoryCommitted = 0;
static void Java_HistoryModel_notifyHistoryCommitted(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_HistoryModel_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_HistoryModel_clazz,
      "notifyHistoryCommitted",

"("
")"
"V",
      &g_HistoryModel_notifyHistoryCommitted);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_HistoryModel_addHistoryData = 0;
static void Java_HistoryModel_addHistoryData(JNIEnv* env, jobject obj, jstring
    url,
    jstring title,
    jlong visitTime,
    jint visitCount,
    jboolean isBookmarked) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_HistoryModel_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_HistoryModel_clazz,
      "addHistoryData",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
"I"
"Z"
")"
"V",
      &g_HistoryModel_addHistoryData);

  env->CallVoidMethod(obj,
      method_id, url, title, visitTime, visitCount, isBookmarked);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_HistoryModel_notifyHistoryDataCompleted = 0;
static void Java_HistoryModel_notifyHistoryDataCompleted(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_HistoryModel_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_HistoryModel_clazz,
      "notifyHistoryDataCompleted",

"("
")"
"V",
      &g_HistoryModel_notifyHistoryDataCompleted);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_HistoryModel_ClearHistoryURLsDone = 0;
static void Java_HistoryModel_ClearHistoryURLsDone(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_HistoryModel_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_HistoryModel_clazz,
      "ClearHistoryURLsDone",

"("
")"
"V",
      &g_HistoryModel_ClearHistoryURLsDone);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_HistoryModel_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kHistoryModelClassPath).obj()));
  static const JNINativeMethod kMethodsHistoryModel[] = {
    { "nativeInit",
"("
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeGetAllHistory",
"("
"I"
"I"
"I"
"D"
"I"
")"
"V", reinterpret_cast<void*>(GetAllHistory) },
    { "nativeClearAllHistory",
"("
"I"
")"
"V", reinterpret_cast<void*>(ClearAllHistory) },
    { "nativeSearchHistory",
"("
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SearchHistory) },
  };
  const int kMethodsHistoryModelSize = arraysize(kMethodsHistoryModel);

  if (env->RegisterNatives(g_HistoryModel_clazz,
                           kMethodsHistoryModel,
                           kMethodsHistoryModelSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // com_sec_android_app_sbrowser_history_model_HistoryModel_JNI

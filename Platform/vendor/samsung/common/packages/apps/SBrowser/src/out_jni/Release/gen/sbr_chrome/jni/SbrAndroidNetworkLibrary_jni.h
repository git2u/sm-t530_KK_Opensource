// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/chrome/browser/SbrAndroidNetworkLibrary

#ifndef org_samsung_chrome_browser_SbrAndroidNetworkLibrary_JNI
#define org_samsung_chrome_browser_SbrAndroidNetworkLibrary_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrAndroidNetworkLibraryClassPath[] =
    "org/samsung/chrome/browser/SbrAndroidNetworkLibrary";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrAndroidNetworkLibrary_clazz = NULL;
}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_SbrAndroidNetworkLibrary_verifyServerCertificates = 0;
static jint Java_SbrAndroidNetworkLibrary_verifyServerCertificates(JNIEnv* env,
    jobjectArray certChain,
    jstring authType) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrAndroidNetworkLibrary_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrAndroidNetworkLibrary_clazz,
      "verifyServerCertificates",

"("
"[[B"
"Ljava/lang/String;"
")"
"I",
      &g_SbrAndroidNetworkLibrary_verifyServerCertificates);

  jint ret =
    env->CallStaticIntMethod(g_SbrAndroidNetworkLibrary_clazz,
      method_id, certChain, authType);
  base::android::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrAndroidNetworkLibrary_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrAndroidNetworkLibraryClassPath).obj()));
  return true;
}

#endif  // org_samsung_chrome_browser_SbrAndroidNetworkLibrary_JNI

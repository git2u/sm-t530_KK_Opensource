// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/content/sbrowser/SbrDeviceMotion

#ifndef org_samsung_content_sbrowser_SbrDeviceMotion_JNI
#define org_samsung_content_sbrowser_SbrDeviceMotion_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrDeviceMotionClassPath[] =
    "org/samsung/content/sbrowser/SbrDeviceMotion";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrDeviceMotion_clazz = NULL;
}  // namespace

namespace device_motion {

// Step 2: method stubs.
static void GotDeviceMotion(JNIEnv* env, jobject obj,
    jint nativeDeviceMotionAndroid,
    jboolean canProvideX,
    jdouble x,
    jboolean canProvideY,
    jdouble y,
    jboolean canProvideZ,
    jdouble z,
    jdouble interva) {
  DCHECK(nativeDeviceMotionAndroid) << "GotDeviceMotion";
  DeviceMotionAndroid* native =
      reinterpret_cast<DeviceMotionAndroid*>(nativeDeviceMotionAndroid);
  return native->GotDeviceMotion(env, obj, canProvideX, x, canProvideY, y,
      canProvideZ, z, interva);
}

static base::subtle::AtomicWord g_SbrDeviceMotion_create = 0;
static ScopedJavaLocalRef<jobject> Java_SbrDeviceMotion_create(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrDeviceMotion_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrDeviceMotion_clazz,
      "create",

"("
")"
"Lorg/samsung/content/sbrowser/SbrDeviceMotion;",
      &g_SbrDeviceMotion_create);

  jobject ret =
    env->CallStaticObjectMethod(g_SbrDeviceMotion_clazz,
      method_id);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SbrDeviceMotion_start = 0;
static jboolean Java_SbrDeviceMotion_start(JNIEnv* env, jobject obj, jint
    nativePtr,
    jint rateInMilliseconds) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrDeviceMotion_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrDeviceMotion_clazz,
      "start",

"("
"I"
"I"
")"
"Z",
      &g_SbrDeviceMotion_start);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id, nativePtr, rateInMilliseconds);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_SbrDeviceMotion_stop = 0;
static void Java_SbrDeviceMotion_stop(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrDeviceMotion_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrDeviceMotion_clazz,
      "stop",

"("
")"
"V",
      &g_SbrDeviceMotion_stop);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrDeviceMotion_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrDeviceMotionClassPath).obj()));
  static const JNINativeMethod kMethodsSbrDeviceMotion[] = {
    { "nativeGotDeviceMotion",
"("
"I"
"Z"
"D"
"Z"
"D"
"Z"
"D"
"D"
")"
"V", reinterpret_cast<void*>(GotDeviceMotion) },
  };
  const int kMethodsSbrDeviceMotionSize = arraysize(kMethodsSbrDeviceMotion);

  if (env->RegisterNatives(g_SbrDeviceMotion_clazz,
                           kMethodsSbrDeviceMotion,
                           kMethodsSbrDeviceMotionSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace device_motion

#endif  // org_samsung_content_sbrowser_SbrDeviceMotion_JNI

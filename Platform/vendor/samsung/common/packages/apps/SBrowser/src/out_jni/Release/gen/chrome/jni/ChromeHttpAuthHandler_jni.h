// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/ChromeHttpAuthHandler

#ifndef org_chromium_chrome_browser_ChromeHttpAuthHandler_JNI
#define org_chromium_chrome_browser_ChromeHttpAuthHandler_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kChromeHttpAuthHandlerClassPath[] =
    "org/chromium/chrome/browser/ChromeHttpAuthHandler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ChromeHttpAuthHandler_clazz = NULL;
}  // namespace

// Step 2: method stubs.
static void SetAuth(JNIEnv* env, jobject obj,
    jint nativeChromeHttpAuthHandler,
    jstring username,
    jstring password) {
  DCHECK(nativeChromeHttpAuthHandler) << "SetAuth";
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  return native->SetAuth(env, obj, username, password);
}

static void CancelAuth(JNIEnv* env, jobject obj,
    jint nativeChromeHttpAuthHandler) {
  DCHECK(nativeChromeHttpAuthHandler) << "CancelAuth";
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  return native->CancelAuth(env, obj);
}

static jstring GetCancelButtonText(JNIEnv* env, jobject obj,
    jint nativeChromeHttpAuthHandler) {
  DCHECK(nativeChromeHttpAuthHandler) << "GetCancelButtonText";
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  return native->GetCancelButtonText(env, obj).Release();
}

static jstring GetMessageTitle(JNIEnv* env, jobject obj,
    jint nativeChromeHttpAuthHandler) {
  DCHECK(nativeChromeHttpAuthHandler) << "GetMessageTitle";
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  return native->GetMessageTitle(env, obj).Release();
}

static jstring GetMessageBody(JNIEnv* env, jobject obj,
    jint nativeChromeHttpAuthHandler) {
  DCHECK(nativeChromeHttpAuthHandler) << "GetMessageBody";
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  return native->GetMessageBody(env, obj).Release();
}

static jstring GetPasswordLabelText(JNIEnv* env, jobject obj,
    jint nativeChromeHttpAuthHandler) {
  DCHECK(nativeChromeHttpAuthHandler) << "GetPasswordLabelText";
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  return native->GetPasswordLabelText(env, obj).Release();
}

static jstring GetOkButtonText(JNIEnv* env, jobject obj,
    jint nativeChromeHttpAuthHandler) {
  DCHECK(nativeChromeHttpAuthHandler) << "GetOkButtonText";
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  return native->GetOkButtonText(env, obj).Release();
}

static jstring GetUsernameLabelText(JNIEnv* env, jobject obj,
    jint nativeChromeHttpAuthHandler) {
  DCHECK(nativeChromeHttpAuthHandler) << "GetUsernameLabelText";
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  return native->GetUsernameLabelText(env, obj).Release();
}

static base::subtle::AtomicWord g_ChromeHttpAuthHandler_create = 0;
static ScopedJavaLocalRef<jobject> Java_ChromeHttpAuthHandler_create(JNIEnv*
    env, jint nativeChromeHttpAuthHandler) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ChromeHttpAuthHandler_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ChromeHttpAuthHandler_clazz,
      "create",

"("
"I"
")"
"Lorg/chromium/chrome/browser/ChromeHttpAuthHandler;",
      &g_ChromeHttpAuthHandler_create);

  jobject ret =
    env->CallStaticObjectMethod(g_ChromeHttpAuthHandler_clazz,
      method_id, nativeChromeHttpAuthHandler);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ChromeHttpAuthHandler_onAutofillDataAvailable
    = 0;
static void Java_ChromeHttpAuthHandler_onAutofillDataAvailable(JNIEnv* env,
    jobject obj, jstring username,
    jstring password) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ChromeHttpAuthHandler_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ChromeHttpAuthHandler_clazz,
      "onAutofillDataAvailable",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_ChromeHttpAuthHandler_onAutofillDataAvailable);

  env->CallVoidMethod(obj,
      method_id, username, password);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ChromeHttpAuthHandler_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kChromeHttpAuthHandlerClassPath).obj()));
  static const JNINativeMethod kMethodsChromeHttpAuthHandler[] = {
    { "nativeSetAuth",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetAuth) },
    { "nativeCancelAuth",
"("
"I"
")"
"V", reinterpret_cast<void*>(CancelAuth) },
    { "nativeGetCancelButtonText",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCancelButtonText) },
    { "nativeGetMessageTitle",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetMessageTitle) },
    { "nativeGetMessageBody",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetMessageBody) },
    { "nativeGetPasswordLabelText",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetPasswordLabelText) },
    { "nativeGetOkButtonText",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetOkButtonText) },
    { "nativeGetUsernameLabelText",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetUsernameLabelText) },
  };
  const int kMethodsChromeHttpAuthHandlerSize =
      arraysize(kMethodsChromeHttpAuthHandler);

  if (env->RegisterNatives(g_ChromeHttpAuthHandler_clazz,
                           kMethodsChromeHttpAuthHandler,
                           kMethodsChromeHttpAuthHandlerSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_ChromeHttpAuthHandler_JNI

// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/LocationProvider

#ifndef org_chromium_content_browser_LocationProvider_JNI
#define org_chromium_content_browser_LocationProvider_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kLocationProviderClassPath[] =
    "org/chromium/content/browser/LocationProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_LocationProvider_clazz = NULL;
}  // namespace

static void NewLocationAvailable(JNIEnv* env, jclass clazz,
    jdouble latitude,
    jdouble longitude,
    jdouble timeStamp,
    jboolean hasAltitude,
    jdouble altitude,
    jboolean hasAccuracy,
    jdouble accuracy,
    jboolean hasHeading,
    jdouble heading,
    jboolean hasSpeed,
    jdouble speed);

static void NewErrorAvailable(JNIEnv* env, jclass clazz,
    jstring message);

// Step 2: method stubs.

static base::subtle::AtomicWord g_LocationProvider_create = 0;
static ScopedJavaLocalRef<jobject> Java_LocationProvider_create(JNIEnv* env,
    jobject context) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_LocationProvider_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_LocationProvider_clazz,
      "create",

"("
"Landroid/content/Context;"
")"
"Lorg/chromium/content/browser/LocationProvider;",
      &g_LocationProvider_create);

  jobject ret =
    env->CallStaticObjectMethod(g_LocationProvider_clazz,
      method_id, context);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_LocationProvider_start = 0;
static jboolean Java_LocationProvider_start(JNIEnv* env, jobject obj, jboolean
    gpsEnabled) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_LocationProvider_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_LocationProvider_clazz,
      "start",

"("
"Z"
")"
"Z",
      &g_LocationProvider_start);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id, gpsEnabled);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_LocationProvider_stop = 0;
static void Java_LocationProvider_stop(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_LocationProvider_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_LocationProvider_clazz,
      "stop",

"("
")"
"V",
      &g_LocationProvider_stop);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_LocationProvider_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kLocationProviderClassPath).obj()));
  static const JNINativeMethod kMethodsLocationProvider[] = {
    { "nativeNewLocationAvailable",
"("
"D"
"D"
"D"
"Z"
"D"
"Z"
"D"
"Z"
"D"
"Z"
"D"
")"
"V", reinterpret_cast<void*>(NewLocationAvailable) },
    { "nativeNewErrorAvailable",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(NewErrorAvailable) },
  };
  const int kMethodsLocationProviderSize = arraysize(kMethodsLocationProvider);

  if (env->RegisterNatives(g_LocationProvider_clazz,
                           kMethodsLocationProvider,
                           kMethodsLocationProviderSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_chromium_content_browser_LocationProvider_JNI

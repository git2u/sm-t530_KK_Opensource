// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/SSLClientCertificateRequest

#ifndef org_chromium_chrome_browser_SSLClientCertificateRequest_JNI
#define org_chromium_chrome_browser_SSLClientCertificateRequest_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSSLClientCertificateRequestClassPath[] =
    "org/chromium/chrome/browser/SSLClientCertificateRequest";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SSLClientCertificateRequest_clazz = NULL;
}  // namespace

namespace chrome {
namespace android {

static void OnSystemRequestCompletion(JNIEnv* env, jclass clazz,
    jint requestPtr,
    jobjectArray certChain,
    jobject privateKey);

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_SSLClientCertificateRequest_selectClientCertificate = 0;
static jboolean Java_SSLClientCertificateRequest_selectClientCertificate(JNIEnv*
    env, jint nativePtr,
    jobjectArray keyTypes,
    jobjectArray encodedPrincipals,
    jstring hostName,
    jint port) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SSLClientCertificateRequest_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SSLClientCertificateRequest_clazz,
      "selectClientCertificate",

"("
"I"
"[Ljava/lang/String;"
"[[B"
"Ljava/lang/String;"
"I"
")"
"Z",
      &g_SSLClientCertificateRequest_selectClientCertificate);

  jboolean ret =
    env->CallStaticBooleanMethod(g_SSLClientCertificateRequest_clazz,
      method_id, nativePtr, keyTypes, encodedPrincipals, hostName, port);
  base::android::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SSLClientCertificateRequest_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kSSLClientCertificateRequestClassPath).obj()));
  static const JNINativeMethod kMethodsSSLClientCertificateRequest[] = {
    { "nativeOnSystemRequestCompletion",
"("
"I"
"[[B"
"Ljava/security/PrivateKey;"
")"
"V", reinterpret_cast<void*>(OnSystemRequestCompletion) },
  };
  const int kMethodsSSLClientCertificateRequestSize =
      arraysize(kMethodsSSLClientCertificateRequest);

  if (env->RegisterNatives(g_SSLClientCertificateRequest_clazz,
                           kMethodsSSLClientCertificateRequest,
                           kMethodsSSLClientCertificateRequestSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_SSLClientCertificateRequest_JNI

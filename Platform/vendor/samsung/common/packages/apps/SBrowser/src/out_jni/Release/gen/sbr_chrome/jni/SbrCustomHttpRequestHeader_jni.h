// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/chrome/browser/SbrCustomHttpRequestHeader

#ifndef org_samsung_chrome_browser_SbrCustomHttpRequestHeader_JNI
#define org_samsung_chrome_browser_SbrCustomHttpRequestHeader_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrCustomHttpRequestHeaderClassPath[] =
    "org/samsung/chrome/browser/SbrCustomHttpRequestHeader";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrCustomHttpRequestHeader_clazz = NULL;
}  // namespace

namespace net {

static jboolean Set(JNIEnv* env, jclass clazz,
    jstring name,
    jstring value,
    jboolean forced);

static jboolean RemoveByName(JNIEnv* env, jclass clazz,
    jstring name);

static void Clear(JNIEnv* env, jclass clazz);

static void SetCustomAcceptLanguage(JNIEnv* env, jclass clazz,
    jstring accept_language);

static void ClearCustomAcceptLanguage(JNIEnv* env, jclass clazz);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrCustomHttpRequestHeader_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kSbrCustomHttpRequestHeaderClassPath).obj()));
  static const JNINativeMethod kMethodsSbrCustomHttpRequestHeader[] = {
    { "nativeSet",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"Z", reinterpret_cast<void*>(Set) },
    { "nativeRemoveByName",
"("
"Ljava/lang/String;"
")"
"Z", reinterpret_cast<void*>(RemoveByName) },
    { "nativeClear",
"("
")"
"V", reinterpret_cast<void*>(Clear) },
    { "nativeSetCustomAcceptLanguage",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetCustomAcceptLanguage) },
    { "nativeClearCustomAcceptLanguage",
"("
")"
"V", reinterpret_cast<void*>(ClearCustomAcceptLanguage) },
  };
  const int kMethodsSbrCustomHttpRequestHeaderSize =
      arraysize(kMethodsSbrCustomHttpRequestHeader);

  if (env->RegisterNatives(g_SbrCustomHttpRequestHeader_clazz,
                           kMethodsSbrCustomHttpRequestHeader,
                           kMethodsSbrCustomHttpRequestHeaderSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace net

#endif  // org_samsung_chrome_browser_SbrCustomHttpRequestHeader_JNI

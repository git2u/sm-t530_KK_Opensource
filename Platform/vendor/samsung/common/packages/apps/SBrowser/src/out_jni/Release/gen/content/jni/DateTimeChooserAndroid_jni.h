// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/input/DateTimeChooserAndroid

#ifndef org_chromium_content_browser_input_DateTimeChooserAndroid_JNI
#define org_chromium_content_browser_input_DateTimeChooserAndroid_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kDateTimeChooserAndroidClassPath[] =
    "org/chromium/content/browser/input/DateTimeChooserAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_DateTimeChooserAndroid_clazz = NULL;
}  // namespace

namespace content {

// Step 2: method stubs.
static void ReplaceDateTime(JNIEnv* env, jobject obj,
    jint nativeDateTimeChooserAndroid,
    jint dialogType,
    jint year,
    jint month,
    jint day,
    jint hour,
    jint minute,
    jint second) {
  DCHECK(nativeDateTimeChooserAndroid) << "ReplaceDateTime";
  DateTimeChooserAndroid* native =
      reinterpret_cast<DateTimeChooserAndroid*>(nativeDateTimeChooserAndroid);
  return native->ReplaceDateTime(env, obj, dialogType, year, month, day, hour,
      minute, second);
}

static void CancelDialog(JNIEnv* env, jobject obj,
    jint nativeDateTimeChooserAndroid) {
  DCHECK(nativeDateTimeChooserAndroid) << "CancelDialog";
  DateTimeChooserAndroid* native =
      reinterpret_cast<DateTimeChooserAndroid*>(nativeDateTimeChooserAndroid);
  return native->CancelDialog(env, obj);
}

static base::subtle::AtomicWord g_DateTimeChooserAndroid_createDateTimeChooser =
    0;
static ScopedJavaLocalRef<jobject>
    Java_DateTimeChooserAndroid_createDateTimeChooser(JNIEnv* env, jobject
    contentViewCore,
    jint nativeDateTimeChooserAndroid,
    jint dialogType,
    jint year,
    jint month,
    jint day,
    jint hour,
    jint minute,
    jint second) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_DateTimeChooserAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_DateTimeChooserAndroid_clazz,
      "createDateTimeChooser",

"("
"Lorg/chromium/content/browser/ContentViewCore;"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
")"
"Lorg/chromium/content/browser/input/DateTimeChooserAndroid;",
      &g_DateTimeChooserAndroid_createDateTimeChooser);

  jobject ret =
    env->CallStaticObjectMethod(g_DateTimeChooserAndroid_clazz,
      method_id, contentViewCore, nativeDateTimeChooserAndroid, dialogType,
          year, month, day, hour, minute, second);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_DateTimeChooserAndroid_initializeDateInputTypes = 0;
static void Java_DateTimeChooserAndroid_initializeDateInputTypes(JNIEnv* env,
    jint textInputTypeDate,
    jint textInputTypeDateTime,
    jint textInputTypeDateTimeLocal,
    jint textInputTypeMonth,
    jint textInputTypeTime) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_DateTimeChooserAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_DateTimeChooserAndroid_clazz,
      "initializeDateInputTypes",

"("
"I"
"I"
"I"
"I"
"I"
")"
"V",
      &g_DateTimeChooserAndroid_initializeDateInputTypes);

  env->CallStaticVoidMethod(g_DateTimeChooserAndroid_clazz,
      method_id, textInputTypeDate, textInputTypeDateTime,
          textInputTypeDateTimeLocal, textInputTypeMonth, textInputTypeTime);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_DateTimeChooserAndroid_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kDateTimeChooserAndroidClassPath).obj()));
  static const JNINativeMethod kMethodsDateTimeChooserAndroid[] = {
    { "nativeReplaceDateTime",
"("
"I"
"I"
"I"
"I"
"I"
"I"
"I"
"I"
")"
"V", reinterpret_cast<void*>(ReplaceDateTime) },
    { "nativeCancelDialog",
"("
"I"
")"
"V", reinterpret_cast<void*>(CancelDialog) },
  };
  const int kMethodsDateTimeChooserAndroidSize =
      arraysize(kMethodsDateTimeChooserAndroid);

  if (env->RegisterNatives(g_DateTimeChooserAndroid_clazz,
                           kMethodsDateTimeChooserAndroid,
                           kMethodsDateTimeChooserAndroidSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_input_DateTimeChooserAndroid_JNI

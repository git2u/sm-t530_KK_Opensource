// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/ContentVideoView

#ifndef org_chromium_content_browser_ContentVideoView_JNI
#define org_chromium_content_browser_ContentVideoView_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kContentVideoViewClassPath[] =
    "org/chromium/content/browser/ContentVideoView";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ContentVideoView_clazz = NULL;
}  // namespace

namespace content {

// Step 2: method stubs.
static void ExitFullscreen(JNIEnv* env, jobject obj,
    jint nativeContentVideoView,
    jboolean relaseMediaPlayer) {
  DCHECK(nativeContentVideoView) << "ExitFullscreen";
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  return native->ExitFullscreen(env, obj, relaseMediaPlayer);
}

static jint GetCurrentPosition(JNIEnv* env, jobject obj,
    jint nativeContentVideoView) {
  DCHECK(nativeContentVideoView) << "GetCurrentPosition";
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  return native->GetCurrentPosition(env, obj);
}

static jint GetDurationInMilliSeconds(JNIEnv* env, jobject obj,
    jint nativeContentVideoView) {
  DCHECK(nativeContentVideoView) << "GetDurationInMilliSeconds";
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  return native->GetDurationInMilliSeconds(env, obj);
}

static void UpdateMediaMetadata(JNIEnv* env, jobject obj,
    jint nativeContentVideoView) {
  DCHECK(nativeContentVideoView) << "UpdateMediaMetadata";
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  return native->UpdateMediaMetadata(env, obj);
}

static jint GetVideoWidth(JNIEnv* env, jobject obj,
    jint nativeContentVideoView) {
  DCHECK(nativeContentVideoView) << "GetVideoWidth";
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  return native->GetVideoWidth(env, obj);
}

static jint GetVideoHeight(JNIEnv* env, jobject obj,
    jint nativeContentVideoView) {
  DCHECK(nativeContentVideoView) << "GetVideoHeight";
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  return native->GetVideoHeight(env, obj);
}

static jboolean IsPlaying(JNIEnv* env, jobject obj,
    jint nativeContentVideoView) {
  DCHECK(nativeContentVideoView) << "IsPlaying";
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  return native->IsPlaying(env, obj);
}

static void Pause(JNIEnv* env, jobject obj,
    jint nativeContentVideoView) {
  DCHECK(nativeContentVideoView) << "Pause";
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  return native->Pause(env, obj);
}

static void Play(JNIEnv* env, jobject obj,
    jint nativeContentVideoView) {
  DCHECK(nativeContentVideoView) << "Play";
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  return native->Play(env, obj);
}

static void SeekTo(JNIEnv* env, jobject obj,
    jint nativeContentVideoView,
    jint msec) {
  DCHECK(nativeContentVideoView) << "SeekTo";
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  return native->SeekTo(env, obj, msec);
}

static void SetSurface(JNIEnv* env, jobject obj,
    jint nativeContentVideoView,
    jobject surface) {
  DCHECK(nativeContentVideoView) << "SetSurface";
  ContentVideoView* native =
      reinterpret_cast<ContentVideoView*>(nativeContentVideoView);
  return native->SetSurface(env, obj, surface);
}

static base::subtle::AtomicWord g_ContentVideoView_onMediaPlayerError = 0;
static void Java_ContentVideoView_onMediaPlayerError(JNIEnv* env, jobject obj,
    jint errorType) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "onMediaPlayerError",

"("
"I"
")"
"V",
      &g_ContentVideoView_onMediaPlayerError);

  env->CallVoidMethod(obj,
      method_id, errorType);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_onVideoSizeChanged = 0;
static void Java_ContentVideoView_onVideoSizeChanged(JNIEnv* env, jobject obj,
    jint width,
    jint height) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "onVideoSizeChanged",

"("
"I"
"I"
")"
"V",
      &g_ContentVideoView_onVideoSizeChanged);

  env->CallVoidMethod(obj,
      method_id, width, height);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_onBufferingUpdate = 0;
static void Java_ContentVideoView_onBufferingUpdate(JNIEnv* env, jobject obj,
    jint percent) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "onBufferingUpdate",

"("
"I"
")"
"V",
      &g_ContentVideoView_onBufferingUpdate);

  env->CallVoidMethod(obj,
      method_id, percent);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_onPlaybackComplete = 0;
static void Java_ContentVideoView_onPlaybackComplete(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "onPlaybackComplete",

"("
")"
"V",
      &g_ContentVideoView_onPlaybackComplete);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_updateMediaMetadata = 0;
static void Java_ContentVideoView_updateMediaMetadata(JNIEnv* env, jobject obj,
    jint videoWidth,
    jint videoHeight,
    jint duration,
    jboolean canPause,
    jboolean canSeekBack,
    jboolean canSeekForward) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "updateMediaMetadata",

"("
"I"
"I"
"I"
"Z"
"Z"
"Z"
")"
"V",
      &g_ContentVideoView_updateMediaMetadata);

  env->CallVoidMethod(obj,
      method_id, videoWidth, videoHeight, duration, canPause, canSeekBack,
          canSeekForward);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_onStart = 0;
static void Java_ContentVideoView_onStart(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "onStart",

"("
")"
"V",
      &g_ContentVideoView_onStart);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_openVideo = 0;
static void Java_ContentVideoView_openVideo(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ContentVideoView_clazz,
      "openVideo",

"("
")"
"V",
      &g_ContentVideoView_openVideo);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_notifyDestroyContentVideoView
    = 0;
static void Java_ContentVideoView_notifyDestroyContentVideoView(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ContentVideoView_clazz,
      "notifyDestroyContentVideoView",

"("
")"
"V",
      &g_ContentVideoView_notifyDestroyContentVideoView);

  env->CallStaticVoidMethod(g_ContentVideoView_clazz,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ContentVideoView_assignDelegate = 0;
static jboolean Java_ContentVideoView_assignDelegate(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ContentVideoView_clazz,
      "assignDelegate",

"("
")"
"Z",
      &g_ContentVideoView_assignDelegate);

  jboolean ret =
    env->CallStaticBooleanMethod(g_ContentVideoView_clazz,
      method_id);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ContentVideoView_createContentVideoView = 0;
static ScopedJavaLocalRef<jobject>
    Java_ContentVideoView_createContentVideoView(JNIEnv* env, jint
    nativeContentVideoView) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ContentVideoView_clazz,
      "createContentVideoView",

"("
"I"
")"
"Lorg/chromium/content/browser/ContentVideoView;",
      &g_ContentVideoView_createContentVideoView);

  jobject ret =
    env->CallStaticObjectMethod(g_ContentVideoView_clazz,
      method_id, nativeContentVideoView);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ContentVideoView_destroyContentVideoView = 0;
static void Java_ContentVideoView_destroyContentVideoView(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ContentVideoView_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ContentVideoView_clazz,
      "destroyContentVideoView",

"("
")"
"V",
      &g_ContentVideoView_destroyContentVideoView);

  env->CallStaticVoidMethod(g_ContentVideoView_clazz,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ContentVideoView_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kContentVideoViewClassPath).obj()));
  static const JNINativeMethod kMethodsContentVideoView[] = {
    { "nativeExitFullscreen",
"("
"I"
"Z"
")"
"V", reinterpret_cast<void*>(ExitFullscreen) },
    { "nativeGetCurrentPosition",
"("
"I"
")"
"I", reinterpret_cast<void*>(GetCurrentPosition) },
    { "nativeGetDurationInMilliSeconds",
"("
"I"
")"
"I", reinterpret_cast<void*>(GetDurationInMilliSeconds) },
    { "nativeUpdateMediaMetadata",
"("
"I"
")"
"V", reinterpret_cast<void*>(UpdateMediaMetadata) },
    { "nativeGetVideoWidth",
"("
"I"
")"
"I", reinterpret_cast<void*>(GetVideoWidth) },
    { "nativeGetVideoHeight",
"("
"I"
")"
"I", reinterpret_cast<void*>(GetVideoHeight) },
    { "nativeIsPlaying",
"("
"I"
")"
"Z", reinterpret_cast<void*>(IsPlaying) },
    { "nativePause",
"("
"I"
")"
"V", reinterpret_cast<void*>(Pause) },
    { "nativePlay",
"("
"I"
")"
"V", reinterpret_cast<void*>(Play) },
    { "nativeSeekTo",
"("
"I"
"I"
")"
"V", reinterpret_cast<void*>(SeekTo) },
    { "nativeSetSurface",
"("
"I"
"Landroid/view/Surface;"
")"
"V", reinterpret_cast<void*>(SetSurface) },
  };
  const int kMethodsContentVideoViewSize = arraysize(kMethodsContentVideoView);

  if (env->RegisterNatives(g_ContentVideoView_clazz,
                           kMethodsContentVideoView,
                           kMethodsContentVideoViewSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_chromium_content_browser_ContentVideoView_JNI

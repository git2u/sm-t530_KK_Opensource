// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/ui/SelectFileDialog

#ifndef org_chromium_ui_SelectFileDialog_JNI
#define org_chromium_ui_SelectFileDialog_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSelectFileDialogClassPath[] = "org/chromium/ui/SelectFileDialog";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SelectFileDialog_clazz = NULL;
}  // namespace

namespace ui {

// Step 2: method stubs.
static void OnFileSelected(JNIEnv* env, jobject obj,
    jint nativeSelectFileDialogImpl,
    jstring filePath) {
  DCHECK(nativeSelectFileDialogImpl) << "OnFileSelected";
  SelectFileDialogImpl* native =
      reinterpret_cast<SelectFileDialogImpl*>(nativeSelectFileDialogImpl);
  return native->OnFileSelected(env, obj, filePath);
}

static void OnFileNotSelected(JNIEnv* env, jobject obj,
    jint nativeSelectFileDialogImpl) {
  DCHECK(nativeSelectFileDialogImpl) << "OnFileNotSelected";
  SelectFileDialogImpl* native =
      reinterpret_cast<SelectFileDialogImpl*>(nativeSelectFileDialogImpl);
  return native->OnFileNotSelected(env, obj);
}

static base::subtle::AtomicWord g_SelectFileDialog_selectFile = 0;
static void Java_SelectFileDialog_selectFile(JNIEnv* env, jobject obj,
    jobjectArray fileTypes,
    jstring capture,
    jobject window) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SelectFileDialog_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SelectFileDialog_clazz,
      "selectFile",

"("
"[Ljava/lang/String;"
"Ljava/lang/String;"
"Lorg/chromium/ui/WindowAndroid;"
")"
"V",
      &g_SelectFileDialog_selectFile);

  env->CallVoidMethod(obj,
      method_id, fileTypes, capture, window);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SelectFileDialog_create = 0;
static ScopedJavaLocalRef<jobject> Java_SelectFileDialog_create(JNIEnv* env,
    jint nativeSelectFileDialog) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SelectFileDialog_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SelectFileDialog_clazz,
      "create",

"("
"I"
")"
"Lorg/chromium/ui/SelectFileDialog;",
      &g_SelectFileDialog_create);

  jobject ret =
    env->CallStaticObjectMethod(g_SelectFileDialog_clazz,
      method_id, nativeSelectFileDialog);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SelectFileDialog_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSelectFileDialogClassPath).obj()));
  static const JNINativeMethod kMethodsSelectFileDialog[] = {
    { "nativeOnFileSelected",
"("
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(OnFileSelected) },
    { "nativeOnFileNotSelected",
"("
"I"
")"
"V", reinterpret_cast<void*>(OnFileNotSelected) },
  };
  const int kMethodsSelectFileDialogSize = arraysize(kMethodsSelectFileDialog);

  if (env->RegisterNatives(g_SelectFileDialog_clazz,
                           kMethodsSelectFileDialog,
                           kMethodsSelectFileDialogSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace ui

#endif  // org_chromium_ui_SelectFileDialog_JNI

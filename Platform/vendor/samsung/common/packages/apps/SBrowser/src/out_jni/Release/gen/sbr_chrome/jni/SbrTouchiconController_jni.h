// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/chrome/browser/SbrTouchiconController

#ifndef org_samsung_chrome_browser_SbrTouchiconController_JNI
#define org_samsung_chrome_browser_SbrTouchiconController_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrTouchiconControllerClassPath[] =
    "org/samsung/chrome/browser/SbrTouchiconController";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrTouchiconController_clazz = NULL;
}  // namespace

static jint Init(JNIEnv* env, jobject obj);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeSbrTouchiconController) {
  DCHECK(nativeSbrTouchiconController) << "Destroy";
  SbrTouchiconController* native =
      reinterpret_cast<SbrTouchiconController*>(nativeSbrTouchiconController);
  return native->Destroy(env, obj);
}

static void GetTouchicon(JNIEnv* env, jobject obj,
    jint nativeSbrTouchiconController,
    jstring url) {
  DCHECK(nativeSbrTouchiconController) << "GetTouchicon";
  SbrTouchiconController* native =
      reinterpret_cast<SbrTouchiconController*>(nativeSbrTouchiconController);
  return native->GetTouchicon(env, obj, url);
}

static base::subtle::AtomicWord g_SbrTouchiconController_SetTouchicon = 0;
static void Java_SbrTouchiconController_SetTouchicon(JNIEnv* env, jobject obj,
    jstring url,
    jbyteArray data) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrTouchiconController_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrTouchiconController_clazz,
      "SetTouchicon",

"("
"Ljava/lang/String;"
"[B"
")"
"V",
      &g_SbrTouchiconController_SetTouchicon);

  env->CallVoidMethod(obj,
      method_id, url, data);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_SbrTouchiconController_SetDefaultTouchicon =
    0;
static void Java_SbrTouchiconController_SetDefaultTouchicon(JNIEnv* env, jobject
    obj, jbyteArray data) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrTouchiconController_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrTouchiconController_clazz,
      "SetDefaultTouchicon",

"("
"[B"
")"
"V",
      &g_SbrTouchiconController_SetDefaultTouchicon);

  env->CallVoidMethod(obj,
      method_id, data);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrTouchiconController_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrTouchiconControllerClassPath).obj()));
  static const JNINativeMethod kMethodsSbrTouchiconController[] = {
    { "nativeInit",
"("
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeGetTouchicon",
"("
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(GetTouchicon) },
  };
  const int kMethodsSbrTouchiconControllerSize =
      arraysize(kMethodsSbrTouchiconController);

  if (env->RegisterNatives(g_SbrTouchiconController_clazz,
                           kMethodsSbrTouchiconController,
                           kMethodsSbrTouchiconControllerSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_samsung_chrome_browser_SbrTouchiconController_JNI

// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/chrome/browser/SbrWebsiteSettingsUtils

#ifndef org_samsung_chrome_browser_SbrWebsiteSettingsUtils_JNI
#define org_samsung_chrome_browser_SbrWebsiteSettingsUtils_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kStorageInfoReadyCallbackClassPath[] =
    "org/samsung/chrome/browser/SbrWebsiteSettingsUtils$StorageInfoReadyCallback";
const char kStorageInfoClearedCallbackClassPath[] =
    "org/samsung/chrome/browser/SbrWebsiteSettingsUtils$StorageInfoClearedCallback";
const char kSbrWebsiteSettingsUtilsClassPath[] =
    "org/samsung/chrome/browser/SbrWebsiteSettingsUtils";
const char kStorageInfoClassPath[] =
    "org/samsung/chrome/browser/SbrWebsiteSettingsUtils$StorageInfo";
const char kLocalStorageInfoReadyCallbackClassPath[] =
    "org/samsung/chrome/browser/SbrWebsiteSettingsUtils$LocalStorageInfoReadyCallback";
const char kGeolocationInfoClassPath[] =
    "org/samsung/chrome/browser/SbrWebsiteSettingsUtils$GeolocationInfo";
const char kLocalStorageInfoClassPath[] =
    "org/samsung/chrome/browser/SbrWebsiteSettingsUtils$LocalStorageInfo";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_StorageInfoReadyCallback_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_StorageInfoClearedCallback_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrWebsiteSettingsUtils_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_StorageInfo_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_LocalStorageInfoReadyCallback_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_GeolocationInfo_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_LocalStorageInfo_clazz = NULL;
}  // namespace

static jobject GetGeolocationOrigins(JNIEnv* env, jclass clazz);

static jobject GetGeolocationSettingForOrigin(JNIEnv* env, jclass clazz,
    jstring origin,
    jstring embedder);

static void SetGeolocationSettingForOrigin(JNIEnv* env, jclass clazz,
    jstring origin,
    jstring embedder,
    jobject value);

static void ClearLocalStorageData(JNIEnv* env, jclass clazz,
    jstring path);

static void ClearStorageData(JNIEnv* env, jclass clazz,
    jstring origin,
    jint type,
    jobject callback);

static void FetchLocalStorageInfo(JNIEnv* env, jclass clazz,
    jobject callback);

static void FetchStorageInfo(JNIEnv* env, jclass clazz,
    jobject callback);

// Step 2: method stubs.

static base::subtle::AtomicWord g_GeolocationInfo_setInfo = 0;
static void Java_GeolocationInfo_setInfo(JNIEnv* env, jobject obj, jstring
    origin,
    jstring embedder) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_GeolocationInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_GeolocationInfo_clazz,
      "setInfo",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_GeolocationInfo_setInfo);

  env->CallVoidMethod(obj,
      method_id, origin, embedder);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_LocalStorageInfo_setInfo = 0;
static void Java_LocalStorageInfo_setInfo(JNIEnv* env, jobject obj, jstring
    filePath,
    jlong size) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_LocalStorageInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_LocalStorageInfo_clazz,
      "setInfo",

"("
"Ljava/lang/String;"
"J"
")"
"V",
      &g_LocalStorageInfo_setInfo);

  env->CallVoidMethod(obj,
      method_id, filePath, size);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_StorageInfo_setInfo = 0;
static void Java_StorageInfo_setInfo(JNIEnv* env, jobject obj, jstring host,
    jint type,
    jlong size) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_StorageInfo_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_StorageInfo_clazz,
      "setInfo",

"("
"Ljava/lang/String;"
"I"
"J"
")"
"V",
      &g_StorageInfo_setInfo);

  env->CallVoidMethod(obj,
      method_id, host, type, size);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_LocalStorageInfoReadyCallback_onLocalStorageInfoReady = 0;
static void Java_LocalStorageInfoReadyCallback_onLocalStorageInfoReady(JNIEnv*
    env, jobject obj, jobject paramHashMap) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_LocalStorageInfoReadyCallback_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_LocalStorageInfoReadyCallback_clazz,
      "onLocalStorageInfoReady",

"("
"Ljava/util/HashMap;"
")"
"V",
      &g_LocalStorageInfoReadyCallback_onLocalStorageInfoReady);

  env->CallVoidMethod(obj,
      method_id, paramHashMap);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_StorageInfoReadyCallback_onStorageInfoReady =
    0;
static void Java_StorageInfoReadyCallback_onStorageInfoReady(JNIEnv* env,
    jobject obj, jobject array) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_StorageInfoReadyCallback_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_StorageInfoReadyCallback_clazz,
      "onStorageInfoReady",

"("
"Ljava/util/ArrayList;"
")"
"V",
      &g_StorageInfoReadyCallback_onStorageInfoReady);

  env->CallVoidMethod(obj,
      method_id, array);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_StorageInfoClearedCallback_onStorageInfoCleared = 0;
static void Java_StorageInfoClearedCallback_onStorageInfoCleared(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_StorageInfoClearedCallback_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_StorageInfoClearedCallback_clazz,
      "onStorageInfoCleared",

"("
")"
"V",
      &g_StorageInfoClearedCallback_onStorageInfoCleared);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_StorageInfoReadyCallback_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kStorageInfoReadyCallbackClassPath).obj()));
  g_StorageInfoClearedCallback_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kStorageInfoClearedCallbackClassPath).obj()));
  g_SbrWebsiteSettingsUtils_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrWebsiteSettingsUtilsClassPath).obj()));
  g_StorageInfo_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kStorageInfoClassPath).obj()));
  g_LocalStorageInfoReadyCallback_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kLocalStorageInfoReadyCallbackClassPath).obj()));
  g_GeolocationInfo_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kGeolocationInfoClassPath).obj()));
  g_LocalStorageInfo_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kLocalStorageInfoClassPath).obj()));
  static const JNINativeMethod kMethodsSbrWebsiteSettingsUtils[] = {
    { "nativeGetGeolocationOrigins",
"("
")"
"Ljava/util/ArrayList;", reinterpret_cast<void*>(GetGeolocationOrigins) },
    { "nativeGetGeolocationSettingForOrigin",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Ljava/lang/Boolean;", reinterpret_cast<void*>(GetGeolocationSettingForOrigin)
    },
    { "nativeSetGeolocationSettingForOrigin",
"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/Boolean;"
")"
"V", reinterpret_cast<void*>(SetGeolocationSettingForOrigin) },
    { "nativeClearLocalStorageData",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(ClearLocalStorageData) },
    { "nativeClearStorageData",
"("
"Ljava/lang/String;"
"I"
"Ljava/lang/Object;"
")"
"V", reinterpret_cast<void*>(ClearStorageData) },
    { "nativeFetchLocalStorageInfo",
"("
"Ljava/lang/Object;"
")"
"V", reinterpret_cast<void*>(FetchLocalStorageInfo) },
    { "nativeFetchStorageInfo",
"("
"Ljava/lang/Object;"
")"
"V", reinterpret_cast<void*>(FetchStorageInfo) },
  };
  const int kMethodsSbrWebsiteSettingsUtilsSize =
      arraysize(kMethodsSbrWebsiteSettingsUtils);

  if (env->RegisterNatives(g_SbrWebsiteSettingsUtils_clazz,
                           kMethodsSbrWebsiteSettingsUtils,
                           kMethodsSbrWebsiteSettingsUtilsSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_samsung_chrome_browser_SbrWebsiteSettingsUtils_JNI

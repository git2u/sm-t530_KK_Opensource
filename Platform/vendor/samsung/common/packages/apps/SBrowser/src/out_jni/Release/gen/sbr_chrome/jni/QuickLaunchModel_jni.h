// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/android/app/sbrowser/quicklaunch/model/QuickLaunchModel

#ifndef com_sec_android_app_sbrowser_quicklaunch_model_QuickLaunchModel_JNI
#define com_sec_android_app_sbrowser_quicklaunch_model_QuickLaunchModel_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kQuickLaunchModelClassPath[] =
    "com/sec/android/app/sbrowser/quicklaunch/model/QuickLaunchModel";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_QuickLaunchModel_clazz = NULL;
}  // namespace

static jint Init(JNIEnv* env, jobject obj);

static jboolean IsURLHasThumbnail(JNIEnv* env, jclass clazz,
    jstring url);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeQuickLaunchModel) {
  DCHECK(nativeQuickLaunchModel) << "Destroy";
  QuickLaunchModel* native =
      reinterpret_cast<QuickLaunchModel*>(nativeQuickLaunchModel);
  return native->Destroy(env, obj);
}

static void GetMostVisited(JNIEnv* env, jobject obj,
    jint nativeQuickLaunchModel,
    jint count,
    jint daysBack) {
  DCHECK(nativeQuickLaunchModel) << "GetMostVisited";
  QuickLaunchModel* native =
      reinterpret_cast<QuickLaunchModel*>(nativeQuickLaunchModel);
  return native->GetMostVisited(env, obj, count, daysBack);
}

static jboolean IsMostVisited(JNIEnv* env, jobject obj,
    jint nativeQuickLaunchModel,
    jstring url) {
  DCHECK(nativeQuickLaunchModel) << "IsMostVisited";
  QuickLaunchModel* native =
      reinterpret_cast<QuickLaunchModel*>(nativeQuickLaunchModel);
  return native->IsMostVisited(env, obj, url);
}

static void BlacklistURLFromMostVisited(JNIEnv* env, jobject obj,
    jint nativeQuickLaunchModel,
    jstring url) {
  DCHECK(nativeQuickLaunchModel) << "BlacklistURLFromMostVisited";
  QuickLaunchModel* native =
      reinterpret_cast<QuickLaunchModel*>(nativeQuickLaunchModel);
  return native->BlacklistURLFromMostVisited(env, obj, url);
}

static jboolean IsBlacklistedURL(JNIEnv* env, jobject obj,
    jint nativeQuickLaunchModel,
    jstring url) {
  DCHECK(nativeQuickLaunchModel) << "IsBlacklistedURL";
  QuickLaunchModel* native =
      reinterpret_cast<QuickLaunchModel*>(nativeQuickLaunchModel);
  return native->IsBlacklistedURL(env, obj, url);
}

static base::subtle::AtomicWord g_QuickLaunchModel_addMostVisited = 0;
static void Java_QuickLaunchModel_addMostVisited(JNIEnv* env, jobject obj,
    jstring url,
    jstring title) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_QuickLaunchModel_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_QuickLaunchModel_clazz,
      "addMostVisited",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_QuickLaunchModel_addMostVisited);

  env->CallVoidMethod(obj,
      method_id, url, title);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_QuickLaunchModel_NotifyMostVisitedCompleted =
    0;
static void Java_QuickLaunchModel_NotifyMostVisitedCompleted(JNIEnv* env,
    jobject obj, jboolean result) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_QuickLaunchModel_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_QuickLaunchModel_clazz,
      "NotifyMostVisitedCompleted",

"("
"Z"
")"
"V",
      &g_QuickLaunchModel_NotifyMostVisitedCompleted);

  env->CallVoidMethod(obj,
      method_id, result);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_QuickLaunchModel_NotifyMostVisitedThumbnailChanged = 0;
static void Java_QuickLaunchModel_NotifyMostVisitedThumbnailChanged(JNIEnv* env,
    jobject obj, jboolean result) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_QuickLaunchModel_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_QuickLaunchModel_clazz,
      "NotifyMostVisitedThumbnailChanged",

"("
"Z"
")"
"V",
      &g_QuickLaunchModel_NotifyMostVisitedThumbnailChanged);

  env->CallVoidMethod(obj,
      method_id, result);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_QuickLaunchModel_ClearModelMostVisitedList =
    0;
static void Java_QuickLaunchModel_ClearModelMostVisitedList(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_QuickLaunchModel_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_QuickLaunchModel_clazz,
      "ClearModelMostVisitedList",

"("
")"
"V",
      &g_QuickLaunchModel_ClearModelMostVisitedList);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_QuickLaunchModel_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kQuickLaunchModelClassPath).obj()));
  static const JNINativeMethod kMethodsQuickLaunchModel[] = {
    { "nativeInit",
"("
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeGetMostVisited",
"("
"I"
"I"
"I"
")"
"V", reinterpret_cast<void*>(GetMostVisited) },
    { "nativeIsMostVisited",
"("
"I"
"Ljava/lang/String;"
")"
"Z", reinterpret_cast<void*>(IsMostVisited) },
    { "nativeBlacklistURLFromMostVisited",
"("
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(BlacklistURLFromMostVisited) },
    { "nativeIsBlacklistedURL",
"("
"I"
"Ljava/lang/String;"
")"
"Z", reinterpret_cast<void*>(IsBlacklistedURL) },
    { "nativeIsURLHasThumbnail",
"("
"Ljava/lang/String;"
")"
"Z", reinterpret_cast<void*>(IsURLHasThumbnail) },
  };
  const int kMethodsQuickLaunchModelSize = arraysize(kMethodsQuickLaunchModel);

  if (env->RegisterNatives(g_QuickLaunchModel_clazz,
                           kMethodsQuickLaunchModel,
                           kMethodsQuickLaunchModelSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // com_sec_android_app_sbrowser_quicklaunch_model_QuickLaunchModel_JNI

// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/chrome/browser/SbrChromeNativePreferences

#ifndef org_samsung_chrome_browser_SbrChromeNativePreferences_JNI
#define org_samsung_chrome_browser_SbrChromeNativePreferences_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrChromeNativePreferencesClassPath[] =
    "org/samsung/chrome/browser/SbrChromeNativePreferences";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrChromeNativePreferences_clazz = NULL;
}  // namespace

static jstring GetUserAgent(JNIEnv* env, jobject obj);

static void Get(JNIEnv* env, jobject obj);

static void SetJavaScriptEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void SetKikinEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void SetAllowPopupsEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static jobjectArray GetPopupExceptions(JNIEnv* env, jobject obj);

static void RemovePopupException(JNIEnv* env, jobject obj,
    jstring pattern);

static void SetPopupException(JNIEnv* env, jobject obj,
    jstring pattern,
    jboolean allow);

static void ClearPopUpSettings(JNIEnv* env, jobject obj);

static void SetLoadsImagesAutomatically(JNIEnv* env, jobject obj,
    jboolean value);

static void SetFontScaleFactor(JNIEnv* env, jobject obj,
    jfloat value);

static void SetForceEnableZoom(JNIEnv* env, jobject obj,
    jboolean value);

static void SetMinimumFontSize(JNIEnv* env, jobject obj,
    jint value);

static void SetAllowLocationEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void SetUserAgent(JNIEnv* env, jobject obj,
    jstring value);

static void SetRememberPasswordsEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void SetRememberFormDataEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void SetAutoFillEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void SetWebNotificationType(JNIEnv* env, jobject obj,
    jint value);

static void ClearWebNotification(JNIEnv* env, jobject obj);

static void SetAutologinEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void SetNetworkPredictionEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void SetResolveNavigationErrorEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void SetRemoteDebuggingEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void SetOverviewModeEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void SetFontBoostingModeEnabled(JNIEnv* env, jobject obj,
    jboolean enabled);

static void SetProxyServer(JNIEnv* env, jobject obj,
    jstring value);

static void setUsesEncodingDetector(JNIEnv* env, jobject obj,
    jboolean value);

static void setTextEncoding(JNIEnv* env, jobject obj,
    jstring value);

static void SetBandwidthConservationOption(JNIEnv* env, jobject obj,
    jint value);

static void SetHomeScreenMode(JNIEnv* env, jobject obj,
    jint value);

static void SetCountryCodeAtInstall(JNIEnv* env, jobject obj,
    jstring value);

static jstring GetCountryCodeAtInstall(JNIEnv* env, jobject obj);

static jobject GetAboutVersionStrings(JNIEnv* env, jobject obj);

static void GetCurrentCacheSize(JNIEnv* env, jobject obj);

static void ClearBrowsingData(JNIEnv* env, jobject obj,
    jboolean history,
    jboolean cache,
    jboolean cookies_and_site_data,
    jboolean passwords,
    jboolean formData);

static jobject GetSavedNamePassword(JNIEnv* env, jclass clazz,
    jint value);

static jobject GetSavedPasswordException(JNIEnv* env, jclass clazz,
    jint value);

static void RemoveSavedNamePassword(JNIEnv* env, jclass clazz,
    jint value);

static void RemoveSavedPasswordException(JNIEnv* env, jclass clazz,
    jint value);

static void StartPasswordListRequest(JNIEnv* env, jclass clazz,
    jobject value);

static void StopPasswordListRequest(JNIEnv* env, jclass clazz);

static void SetAllowCookiesEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void GetCurrentCookieCount(JNIEnv* env, jobject obj);

static void GetCookiesForUrl(JNIEnv* env, jobject obj,
    jstring value);

static void SetBingSearchEngineEnabledState(JNIEnv* env, jobject obj,
    jboolean enabled);

static void SetSearchEngine(JNIEnv* env, jobject obj,
    jint value);

static void SetSearchSuggestEnabled(JNIEnv* env, jobject obj,
    jboolean value);

static void UpdateSearchEngineInJava(JNIEnv* env, jobject obj);

static void SetSearchEngineEx(JNIEnv* env, jobject obj,
    jobject value);

static jobjectArray GetLocalizedSearchEngines(JNIEnv* env, jobject obj);

static jstring GetURLForSearchEngine(JNIEnv* env, jobject obj,
    jint value);

static jstring GetFaviconURLForSearchEngine(JNIEnv* env, jobject obj,
    jint value);

static jstring GetFaviconURLForCurrentSearchEngine(JNIEnv* env, jobject obj);

static jstring GetNameForCurrentSearchEngine(JNIEnv* env, jobject obj);

static void SetSavePageDirectory(JNIEnv* env, jobject obj,
    jstring storagePath);

static void SetAllowContentURLAccess(JNIEnv* env, jobject obj,
    jboolean value);

static void SetImideoDebugMode(JNIEnv* env, jobject obj,
    jint mode);

static void ResetToDefaultSettings(JNIEnv* env, jobject obj);

static void SetSessionCacheEnabled(JNIEnv* env, jobject obj,
    jboolean value);

// Step 2: method stubs.

static base::subtle::AtomicWord g_SbrChromeNativePreferences_onGetCookiesForUrl
    = 0;
static void Java_SbrChromeNativePreferences_onGetCookiesForUrl(JNIEnv* env,
    jobject obj, jstring cookies) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrChromeNativePreferences_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrChromeNativePreferences_clazz,
      "onGetCookiesForUrl",

"("
"Ljava/lang/String;"
")"
"V",
      &g_SbrChromeNativePreferences_onGetCookiesForUrl);

  env->CallVoidMethod(obj,
      method_id, cookies);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrChromeNativePreferences_onGetCurrentCookieCount = 0;
static void Java_SbrChromeNativePreferences_onGetCurrentCookieCount(JNIEnv* env,
    jobject obj, jint noOfCookies) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrChromeNativePreferences_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrChromeNativePreferences_clazz,
      "onGetCurrentCookieCount",

"("
"I"
")"
"V",
      &g_SbrChromeNativePreferences_onGetCurrentCookieCount);

  env->CallVoidMethod(obj,
      method_id, noOfCookies);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrChromeNativePreferences_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kSbrChromeNativePreferencesClassPath).obj()));
  static const JNINativeMethod kMethodsSbrChromeNativePreferences[] = {
    { "nativeGetUserAgent",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetUserAgent) },
    { "nativeGet",
"("
")"
"V", reinterpret_cast<void*>(Get) },
    { "nativeSetJavaScriptEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetJavaScriptEnabled) },
    { "nativeSetKikinEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetKikinEnabled) },
    { "nativeSetAllowPopupsEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAllowPopupsEnabled) },
    { "nativeGetPopupExceptions",
"("
")"
"[Ljava/util/HashMap;", reinterpret_cast<void*>(GetPopupExceptions) },
    { "nativeRemovePopupException",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(RemovePopupException) },
    { "nativeSetPopupException",
"("
"Ljava/lang/String;"
"Z"
")"
"V", reinterpret_cast<void*>(SetPopupException) },
    { "nativeClearPopUpSettings",
"("
")"
"V", reinterpret_cast<void*>(ClearPopUpSettings) },
    { "nativeSetLoadsImagesAutomatically",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetLoadsImagesAutomatically) },
    { "nativeSetFontScaleFactor",
"("
"F"
")"
"V", reinterpret_cast<void*>(SetFontScaleFactor) },
    { "nativeSetForceEnableZoom",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetForceEnableZoom) },
    { "nativeSetMinimumFontSize",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetMinimumFontSize) },
    { "nativeSetAllowLocationEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAllowLocationEnabled) },
    { "nativeSetUserAgent",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetUserAgent) },
    { "nativeSetRememberPasswordsEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetRememberPasswordsEnabled) },
    { "nativeSetRememberFormDataEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetRememberFormDataEnabled) },
    { "nativeSetAutoFillEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAutoFillEnabled) },
    { "nativeSetWebNotificationType",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetWebNotificationType) },
    { "nativeClearWebNotification",
"("
")"
"V", reinterpret_cast<void*>(ClearWebNotification) },
    { "nativeSetAutologinEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAutologinEnabled) },
    { "nativeSetNetworkPredictionEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetNetworkPredictionEnabled) },
    { "nativeSetResolveNavigationErrorEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetResolveNavigationErrorEnabled) },
    { "nativeSetRemoteDebuggingEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetRemoteDebuggingEnabled) },
    { "nativeSetOverviewModeEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetOverviewModeEnabled) },
    { "nativeSetFontBoostingModeEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetFontBoostingModeEnabled) },
    { "nativeSetProxyServer",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetProxyServer) },
    { "nativesetUsesEncodingDetector",
"("
"Z"
")"
"V", reinterpret_cast<void*>(setUsesEncodingDetector) },
    { "nativesetTextEncoding",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(setTextEncoding) },
    { "nativeSetBandwidthConservationOption",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetBandwidthConservationOption) },
    { "nativeSetHomeScreenMode",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetHomeScreenMode) },
    { "nativeSetCountryCodeAtInstall",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetCountryCodeAtInstall) },
    { "nativeGetCountryCodeAtInstall",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCountryCodeAtInstall) },
    { "nativeGetAboutVersionStrings",
"("
")"
"Ljava/util/HashMap;", reinterpret_cast<void*>(GetAboutVersionStrings) },
    { "nativeGetCurrentCacheSize",
"("
")"
"V", reinterpret_cast<void*>(GetCurrentCacheSize) },
    { "nativeClearBrowsingData",
"("
"Z"
"Z"
"Z"
"Z"
"Z"
")"
"V", reinterpret_cast<void*>(ClearBrowsingData) },
    { "nativeGetSavedNamePassword",
"("
"I"
")"
"Ljava/util/HashMap;", reinterpret_cast<void*>(GetSavedNamePassword) },
    { "nativeGetSavedPasswordException",
"("
"I"
")"
"Ljava/util/HashMap;", reinterpret_cast<void*>(GetSavedPasswordException) },
    { "nativeRemoveSavedNamePassword",
"("
"I"
")"
"V", reinterpret_cast<void*>(RemoveSavedNamePassword) },
    { "nativeRemoveSavedPasswordException",
"("
"I"
")"
"V", reinterpret_cast<void*>(RemoveSavedPasswordException) },
    { "nativeStartPasswordListRequest",
"("
"Lorg/samsung/chrome/browser/SbrChromeNativePreferences$PasswordListObserver;"
")"
"V", reinterpret_cast<void*>(StartPasswordListRequest) },
    { "nativeStopPasswordListRequest",
"("
")"
"V", reinterpret_cast<void*>(StopPasswordListRequest) },
    { "nativeSetAllowCookiesEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAllowCookiesEnabled) },
    { "nativeGetCurrentCookieCount",
"("
")"
"V", reinterpret_cast<void*>(GetCurrentCookieCount) },
    { "nativeGetCookiesForUrl",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(GetCookiesForUrl) },
    { "nativeSetBingSearchEngineEnabledState",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetBingSearchEngineEnabledState) },
    { "nativeSetSearchEngine",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetSearchEngine) },
    { "nativeSetSearchSuggestEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetSearchSuggestEnabled) },
    { "nativeUpdateSearchEngineInJava",
"("
")"
"V", reinterpret_cast<void*>(UpdateSearchEngineInJava) },
    { "nativeSetSearchEngineEx",
"("
"Ljava/util/HashMap;"
")"
"V", reinterpret_cast<void*>(SetSearchEngineEx) },
    { "nativeGetLocalizedSearchEngines",
"("
")"
"[Ljava/util/HashMap;", reinterpret_cast<void*>(GetLocalizedSearchEngines) },
    { "nativeGetURLForSearchEngine",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetURLForSearchEngine) },
    { "nativeGetFaviconURLForSearchEngine",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetFaviconURLForSearchEngine) },
    { "nativeGetFaviconURLForCurrentSearchEngine",
"("
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(GetFaviconURLForCurrentSearchEngine) },
    { "nativeGetNameForCurrentSearchEngine",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetNameForCurrentSearchEngine) },
    { "nativeSetSavePageDirectory",
"("
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SetSavePageDirectory) },
    { "nativeSetAllowContentURLAccess",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetAllowContentURLAccess) },
    { "nativeSetImideoDebugMode",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetImideoDebugMode) },
    { "nativeResetToDefaultSettings",
"("
")"
"V", reinterpret_cast<void*>(ResetToDefaultSettings) },
    { "nativeSetSessionCacheEnabled",
"("
"Z"
")"
"V", reinterpret_cast<void*>(SetSessionCacheEnabled) },
  };
  const int kMethodsSbrChromeNativePreferencesSize =
      arraysize(kMethodsSbrChromeNativePreferences);

  if (env->RegisterNatives(g_SbrChromeNativePreferences_clazz,
                           kMethodsSbrChromeNativePreferences,
                           kMethodsSbrChromeNativePreferencesSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_samsung_chrome_browser_SbrChromeNativePreferences_JNI

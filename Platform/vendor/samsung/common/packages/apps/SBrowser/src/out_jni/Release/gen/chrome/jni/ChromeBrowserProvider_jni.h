// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/ChromeBrowserProvider

#ifndef org_chromium_chrome_browser_ChromeBrowserProvider_JNI
#define org_chromium_chrome_browser_ChromeBrowserProvider_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kBookmarkNodeClassPath[] =
    "org/chromium/chrome/browser/ChromeBrowserProvider$BookmarkNode";
const char kChromeBrowserProviderClassPath[] =
    "org/chromium/chrome/browser/ChromeBrowserProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_BookmarkNode_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ChromeBrowserProvider_clazz = NULL;
}  // namespace

static jint Init(JNIEnv* env, jobject obj);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider) {
  DCHECK(nativeChromeBrowserProvider) << "Destroy";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->Destroy(env, obj);
}

static jlong AddBookmark(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jstring url,
    jstring title,
    jboolean isFolder,
    jlong parentId) {
  DCHECK(nativeChromeBrowserProvider) << "AddBookmark";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->AddBookmark(env, obj, url, title, isFolder, parentId);
}

static jint RemoveBookmark(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jlong id) {
  DCHECK(nativeChromeBrowserProvider) << "RemoveBookmark";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->RemoveBookmark(env, obj, id);
}

static jint UpdateBookmark(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jlong id,
    jstring url,
    jstring title,
    jlong parentId) {
  DCHECK(nativeChromeBrowserProvider) << "UpdateBookmark";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->UpdateBookmark(env, obj, id, url, title, parentId);
}

static jlong AddBookmarkFromAPI(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jstring url,
    jobject created,
    jobject isBookmark,
    jobject date,
    jbyteArray favicon,
    jstring title,
    jobject visits,
    jlong parentId) {
  DCHECK(nativeChromeBrowserProvider) << "AddBookmarkFromAPI";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->AddBookmarkFromAPI(env, obj, url, created, isBookmark, date,
      favicon, title, visits, parentId);
}

static jobject QueryBookmarkFromAPI(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jobjectArray projection,
    jstring selection,
    jobjectArray selectionArgs,
    jstring sortOrder) {
  DCHECK(nativeChromeBrowserProvider) << "QueryBookmarkFromAPI";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->QueryBookmarkFromAPI(env, obj, projection, selection,
      selectionArgs, sortOrder).Release();
}

static jint UpdateBookmarkFromAPI(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jstring url,
    jobject created,
    jobject isBookmark,
    jobject date,
    jbyteArray favicon,
    jstring title,
    jobject visits,
    jlong parentId,
    jstring selection,
    jobjectArray selectionArgs) {
  DCHECK(nativeChromeBrowserProvider) << "UpdateBookmarkFromAPI";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->UpdateBookmarkFromAPI(env, obj, url, created, isBookmark, date,
      favicon, title, visits, parentId, selection, selectionArgs);
}

static jint RemoveBookmarkFromAPI(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jstring selection,
    jobjectArray selectionArgs) {
  DCHECK(nativeChromeBrowserProvider) << "RemoveBookmarkFromAPI";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->RemoveBookmarkFromAPI(env, obj, selection, selectionArgs);
}

static jint RemoveHistoryFromAPI(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jstring selection,
    jobjectArray selectionArgs) {
  DCHECK(nativeChromeBrowserProvider) << "RemoveHistoryFromAPI";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->RemoveHistoryFromAPI(env, obj, selection, selectionArgs);
}

static jlong AddSearchTermFromAPI(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jstring term,
    jobject date) {
  DCHECK(nativeChromeBrowserProvider) << "AddSearchTermFromAPI";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->AddSearchTermFromAPI(env, obj, term, date);
}

static jobject QuerySearchTermFromAPI(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jobjectArray projection,
    jstring selection,
    jobjectArray selectionArgs,
    jstring sortOrder) {
  DCHECK(nativeChromeBrowserProvider) << "QuerySearchTermFromAPI";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->QuerySearchTermFromAPI(env, obj, projection, selection,
      selectionArgs, sortOrder).Release();
}

static jint UpdateSearchTermFromAPI(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jstring search,
    jobject date,
    jstring selection,
    jobjectArray selectionArgs) {
  DCHECK(nativeChromeBrowserProvider) << "UpdateSearchTermFromAPI";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->UpdateSearchTermFromAPI(env, obj, search, date, selection,
      selectionArgs);
}

static jint RemoveSearchTermFromAPI(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jstring selection,
    jobjectArray selectionArgs) {
  DCHECK(nativeChromeBrowserProvider) << "RemoveSearchTermFromAPI";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->RemoveSearchTermFromAPI(env, obj, selection, selectionArgs);
}

static jboolean BookmarkNodeExists(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jlong id) {
  DCHECK(nativeChromeBrowserProvider) << "BookmarkNodeExists";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->BookmarkNodeExists(env, obj, id);
}

static jlong CreateBookmarksFolderOnce(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jstring title,
    jlong parentId) {
  DCHECK(nativeChromeBrowserProvider) << "CreateBookmarksFolderOnce";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->CreateBookmarksFolderOnce(env, obj, title, parentId);
}

static jobject GetAllBookmarkFolders(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider) {
  DCHECK(nativeChromeBrowserProvider) << "GetAllBookmarkFolders";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->GetAllBookmarkFolders(env, obj).Release();
}

static void RemoveAllBookmarks(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider) {
  DCHECK(nativeChromeBrowserProvider) << "RemoveAllBookmarks";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->RemoveAllBookmarks(env, obj);
}

static jobject GetBookmarkNode(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jlong id,
    jboolean getParent,
    jboolean getChildren) {
  DCHECK(nativeChromeBrowserProvider) << "GetBookmarkNode";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->GetBookmarkNode(env, obj, id, getParent,
      getChildren).Release();
}

static jobject GetMobileBookmarksFolder(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider) {
  DCHECK(nativeChromeBrowserProvider) << "GetMobileBookmarksFolder";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->GetMobileBookmarksFolder(env, obj).Release();
}

static jboolean IsBookmarkInMobileBookmarksBranch(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jlong id) {
  DCHECK(nativeChromeBrowserProvider) << "IsBookmarkInMobileBookmarksBranch";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->IsBookmarkInMobileBookmarksBranch(env, obj, id);
}

static jbyteArray GetFaviconOrTouchIcon(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jstring url) {
  DCHECK(nativeChromeBrowserProvider) << "GetFaviconOrTouchIcon";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->GetFaviconOrTouchIcon(env, obj, url).Release();
}

static jbyteArray GetThumbnail(JNIEnv* env, jobject obj,
    jint nativeChromeBrowserProvider,
    jstring url) {
  DCHECK(nativeChromeBrowserProvider) << "GetThumbnail";
  ChromeBrowserProvider* native =
      reinterpret_cast<ChromeBrowserProvider*>(nativeChromeBrowserProvider);
  return native->GetThumbnail(env, obj, url).Release();
}

static base::subtle::AtomicWord g_BookmarkNode_addChild = 0;
static void Java_BookmarkNode_addChild(JNIEnv* env, jobject obj, jobject child)
    {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BookmarkNode_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_BookmarkNode_clazz,
      "addChild",

"("
"Lorg/chromium/chrome/browser/ChromeBrowserProvider$BookmarkNode;"
")"
"V",
      &g_BookmarkNode_addChild);

  env->CallVoidMethod(obj,
      method_id, child);

}

static base::subtle::AtomicWord g_BookmarkNode_create = 0;
static ScopedJavaLocalRef<jobject> Java_BookmarkNode_create(JNIEnv* env, jlong
    id,
    jint type,
    jstring name,
    jstring url,
    jobject parent,
    jlong editable,
    jlong operatorBookmark) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_BookmarkNode_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_BookmarkNode_clazz,
      "create",

"("
"J"
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Lorg/chromium/chrome/browser/ChromeBrowserProvider$BookmarkNode;"
"J"
"J"
")"
"Lorg/chromium/chrome/browser/ChromeBrowserProvider$BookmarkNode;",
      &g_BookmarkNode_create);

  jobject ret =
    env->CallStaticObjectMethod(g_BookmarkNode_clazz,
      method_id, id, type, name, url, parent, editable, operatorBookmark);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_ChromeBrowserProvider_onBookmarkChanged = 0;
static void Java_ChromeBrowserProvider_onBookmarkChanged(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ChromeBrowserProvider_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ChromeBrowserProvider_clazz,
      "onBookmarkChanged",

"("
")"
"V",
      &g_ChromeBrowserProvider_onBookmarkChanged);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ChromeBrowserProvider_onSearchTermChanged = 0;
static void Java_ChromeBrowserProvider_onSearchTermChanged(JNIEnv* env, jobject
    obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ChromeBrowserProvider_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ChromeBrowserProvider_clazz,
      "onSearchTermChanged",

"("
")"
"V",
      &g_ChromeBrowserProvider_onSearchTermChanged);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_BookmarkNode_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kBookmarkNodeClassPath).obj()));
  g_ChromeBrowserProvider_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kChromeBrowserProviderClassPath).obj()));
  static const JNINativeMethod kMethodsChromeBrowserProvider[] = {
    { "nativeInit",
"("
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeAddBookmark",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
"J"
")"
"J", reinterpret_cast<void*>(AddBookmark) },
    { "nativeRemoveBookmark",
"("
"I"
"J"
")"
"I", reinterpret_cast<void*>(RemoveBookmark) },
    { "nativeUpdateBookmark",
"("
"I"
"J"
"Ljava/lang/String;"
"Ljava/lang/String;"
"J"
")"
"I", reinterpret_cast<void*>(UpdateBookmark) },
    { "nativeAddBookmarkFromAPI",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/Long;"
"Ljava/lang/Boolean;"
"Ljava/lang/Long;"
"[B"
"Ljava/lang/String;"
"Ljava/lang/Integer;"
"J"
")"
"J", reinterpret_cast<void*>(AddBookmarkFromAPI) },
    { "nativeQueryBookmarkFromAPI",
"("
"I"
"[Ljava/lang/String;"
"Ljava/lang/String;"
"[Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Lorg/chromium/chrome/browser/database/SQLiteCursor;",
    reinterpret_cast<void*>(QueryBookmarkFromAPI) },
    { "nativeUpdateBookmarkFromAPI",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/Long;"
"Ljava/lang/Boolean;"
"Ljava/lang/Long;"
"[B"
"Ljava/lang/String;"
"Ljava/lang/Integer;"
"J"
"Ljava/lang/String;"
"[Ljava/lang/String;"
")"
"I", reinterpret_cast<void*>(UpdateBookmarkFromAPI) },
    { "nativeRemoveBookmarkFromAPI",
"("
"I"
"Ljava/lang/String;"
"[Ljava/lang/String;"
")"
"I", reinterpret_cast<void*>(RemoveBookmarkFromAPI) },
    { "nativeRemoveHistoryFromAPI",
"("
"I"
"Ljava/lang/String;"
"[Ljava/lang/String;"
")"
"I", reinterpret_cast<void*>(RemoveHistoryFromAPI) },
    { "nativeAddSearchTermFromAPI",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/Long;"
")"
"J", reinterpret_cast<void*>(AddSearchTermFromAPI) },
    { "nativeQuerySearchTermFromAPI",
"("
"I"
"[Ljava/lang/String;"
"Ljava/lang/String;"
"[Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Lorg/chromium/chrome/browser/database/SQLiteCursor;",
    reinterpret_cast<void*>(QuerySearchTermFromAPI) },
    { "nativeUpdateSearchTermFromAPI",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/Long;"
"Ljava/lang/String;"
"[Ljava/lang/String;"
")"
"I", reinterpret_cast<void*>(UpdateSearchTermFromAPI) },
    { "nativeRemoveSearchTermFromAPI",
"("
"I"
"Ljava/lang/String;"
"[Ljava/lang/String;"
")"
"I", reinterpret_cast<void*>(RemoveSearchTermFromAPI) },
    { "nativeBookmarkNodeExists",
"("
"I"
"J"
")"
"Z", reinterpret_cast<void*>(BookmarkNodeExists) },
    { "nativeCreateBookmarksFolderOnce",
"("
"I"
"Ljava/lang/String;"
"J"
")"
"J", reinterpret_cast<void*>(CreateBookmarksFolderOnce) },
    { "nativeGetAllBookmarkFolders",
"("
"I"
")"
"Lorg/chromium/chrome/browser/ChromeBrowserProvider$BookmarkNode;",
    reinterpret_cast<void*>(GetAllBookmarkFolders) },
    { "nativeRemoveAllBookmarks",
"("
"I"
")"
"V", reinterpret_cast<void*>(RemoveAllBookmarks) },
    { "nativeGetBookmarkNode",
"("
"I"
"J"
"Z"
"Z"
")"
"Lorg/chromium/chrome/browser/ChromeBrowserProvider$BookmarkNode;",
    reinterpret_cast<void*>(GetBookmarkNode) },
    { "nativeGetMobileBookmarksFolder",
"("
"I"
")"
"Lorg/chromium/chrome/browser/ChromeBrowserProvider$BookmarkNode;",
    reinterpret_cast<void*>(GetMobileBookmarksFolder) },
    { "nativeIsBookmarkInMobileBookmarksBranch",
"("
"I"
"J"
")"
"Z", reinterpret_cast<void*>(IsBookmarkInMobileBookmarksBranch) },
    { "nativeGetFaviconOrTouchIcon",
"("
"I"
"Ljava/lang/String;"
")"
"[B", reinterpret_cast<void*>(GetFaviconOrTouchIcon) },
    { "nativeGetThumbnail",
"("
"I"
"Ljava/lang/String;"
")"
"[B", reinterpret_cast<void*>(GetThumbnail) },
  };
  const int kMethodsChromeBrowserProviderSize =
      arraysize(kMethodsChromeBrowserProvider);

  if (env->RegisterNatives(g_ChromeBrowserProvider_clazz,
                           kMethodsChromeBrowserProvider,
                           kMethodsChromeBrowserProviderSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_ChromeBrowserProvider_JNI

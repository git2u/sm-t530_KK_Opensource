// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/chrome/browser/SbrInfoBarContainer

#ifndef org_samsung_chrome_browser_SbrInfoBarContainer_JNI
#define org_samsung_chrome_browser_SbrInfoBarContainer_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrInfoBarContainerClassPath[] =
    "org/samsung/chrome/browser/SbrInfoBarContainer";
const char kSbrNativeInfoBarClassPath[] =
    "org/samsung/chrome/browser/SbrInfoBarContainer$SbrNativeInfoBar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrInfoBarContainer_clazz = NULL;
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrNativeInfoBar_clazz = NULL;
}  // namespace

static jint Init(JNIEnv* env, jobject obj,
    jint contentView);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeInfoBarContainerAndroid) {
  DCHECK(nativeInfoBarContainerAndroid) << "Destroy";
  InfoBarContainerAndroid* native =
      reinterpret_cast<InfoBarContainerAndroid*>(nativeInfoBarContainerAndroid);
  return native->Destroy(env, obj);
}

static void OnInfoBarClosed(JNIEnv* env, jobject obj,
    jint nativeInfoBar) {
  DCHECK(nativeInfoBar) << "OnInfoBarClosed";
  InfoBar* native = reinterpret_cast<InfoBar*>(nativeInfoBar);
  return native->OnInfoBarClosed(env, obj);
}

static void OnConfirmClicked(JNIEnv* env, jobject obj,
    jint nativeInfoBar,
    jboolean confirm) {
  DCHECK(nativeInfoBar) << "OnConfirmClicked";
  InfoBar* native = reinterpret_cast<InfoBar*>(nativeInfoBar);
  return native->OnConfirmClicked(env, obj, confirm);
}

static void OnAutoLogin(JNIEnv* env, jobject obj,
    jint nativeInfoBar,
    jstring url) {
  DCHECK(nativeInfoBar) << "OnAutoLogin";
  InfoBar* native = reinterpret_cast<InfoBar*>(nativeInfoBar);
  return native->OnAutoLogin(env, obj, url);
}

static jstring GetAutoLoginMessage(JNIEnv* env, jobject obj,
    jint nativeInfoBar,
    jstring account) {
  DCHECK(nativeInfoBar) << "GetAutoLoginMessage";
  InfoBar* native = reinterpret_cast<InfoBar*>(nativeInfoBar);
  return native->GetAutoLoginMessage(env, obj, account).Release();
}

static base::subtle::AtomicWord g_SbrInfoBarContainer_showConfirmInfoBar = 0;
static ScopedJavaLocalRef<jobject>
    Java_SbrInfoBarContainer_showConfirmInfoBar(JNIEnv* env, jobject obj, jint
    nativeInfoBar,
    jstring buttonOk,
    jstring buttonCancel,
    jstring title,
    jobject icon,
    jboolean type) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrInfoBarContainer_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrInfoBarContainer_clazz,
      "showConfirmInfoBar",

"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Landroid/graphics/Bitmap;"
"Z"
")"
"Lorg/samsung/chrome/browser/SbrInfoBarContainer$SbrNativeInfoBar;",
      &g_SbrInfoBarContainer_showConfirmInfoBar);

  jobject ret =
    env->CallObjectMethod(obj,
      method_id, nativeInfoBar, buttonOk, buttonCancel, title, icon, type);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SbrInfoBarContainer_showAutoLoginInfoBar = 0;
static ScopedJavaLocalRef<jobject>
    Java_SbrInfoBarContainer_showAutoLoginInfoBar(JNIEnv* env, jobject obj, jint
    nativeInfoBar,
    jstring realm,
    jstring account,
    jstring args,
    jstring okButtonText,
    jstring cancelButtonText) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrInfoBarContainer_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrInfoBarContainer_clazz,
      "showAutoLoginInfoBar",

"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Lorg/samsung/chrome/browser/SbrInfoBarContainer$SbrNativeInfoBar;",
      &g_SbrInfoBarContainer_showAutoLoginInfoBar);

  jobject ret =
    env->CallObjectMethod(obj,
      method_id, nativeInfoBar, realm, account, args, okButtonText,
          cancelButtonText);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SbrInfoBarContainer_shouldShowAutoLogin = 0;
static jboolean Java_SbrInfoBarContainer_shouldShowAutoLogin(JNIEnv* env,
    jobject chromeView,
    jstring realm,
    jstring account,
    jstring args) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrInfoBarContainer_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrInfoBarContainer_clazz,
      "shouldShowAutoLogin",

"("
"Landroid/view/View;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Z",
      &g_SbrInfoBarContainer_shouldShowAutoLogin);

  jboolean ret =
    env->CallStaticBooleanMethod(g_SbrInfoBarContainer_clazz,
      method_id, chromeView, realm, account, args);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_SbrNativeInfoBar_dismiss = 0;
static void Java_SbrNativeInfoBar_dismiss(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrNativeInfoBar_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrNativeInfoBar_clazz,
      "dismiss",

"("
")"
"V",
      &g_SbrNativeInfoBar_dismiss);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrInfoBarContainer_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrInfoBarContainerClassPath).obj()));
  g_SbrNativeInfoBar_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrNativeInfoBarClassPath).obj()));
  static const JNINativeMethod kMethodsSbrInfoBarContainer[] = {
    { "nativeInit",
"("
"I"
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeOnInfoBarClosed",
"("
"I"
")"
"V", reinterpret_cast<void*>(OnInfoBarClosed) },
    { "nativeOnConfirmClicked",
"("
"I"
"Z"
")"
"V", reinterpret_cast<void*>(OnConfirmClicked) },
    { "nativeOnAutoLogin",
"("
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(OnAutoLogin) },
    { "nativeGetAutoLoginMessage",
"("
"I"
"Ljava/lang/String;"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetAutoLoginMessage) },
  };
  const int kMethodsSbrInfoBarContainerSize =
      arraysize(kMethodsSbrInfoBarContainer);

  if (env->RegisterNatives(g_SbrInfoBarContainer_clazz,
                           kMethodsSbrInfoBarContainer,
                           kMethodsSbrInfoBarContainerSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_samsung_chrome_browser_SbrInfoBarContainer_JNI

// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/chrome/browser/SbrMediaPlayerMotionListener

#ifndef org_samsung_chrome_browser_SbrMediaPlayerMotionListener_JNI
#define org_samsung_chrome_browser_SbrMediaPlayerMotionListener_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrMediaPlayerMotionListenerClassPath[] =
    "org/samsung/chrome/browser/SbrMediaPlayerMotionListener";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrMediaPlayerMotionListener_clazz = NULL;
}  // namespace

namespace media {

// Step 2: method stubs.
static void PauseMedia(JNIEnv* env, jobject obj,
    jint nativeSbrMediaPlayerMotionListener) {
  DCHECK(nativeSbrMediaPlayerMotionListener) << "PauseMedia";
  SbrMediaPlayerMotionListener* native =
      reinterpret_cast<SbrMediaPlayerMotionListener*>(nativeSbrMediaPlayerMotionListener);
  return native->PauseMedia(env, obj);
}

static base::subtle::AtomicWord g_SbrMediaPlayerMotionListener_create = 0;
static ScopedJavaLocalRef<jobject>
    Java_SbrMediaPlayerMotionListener_create(JNIEnv* env, jint
    nativeSbrMediaPlayerMotionListener,
    jobject context,
    jobject mediaPlayer) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrMediaPlayerMotionListener_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SbrMediaPlayerMotionListener_clazz,
      "create",

"("
"I"
"Landroid/content/Context;"
"Landroid/media/MediaPlayer;"
")"
"Lorg/samsung/chrome/browser/SbrMediaPlayerMotionListener;",
      &g_SbrMediaPlayerMotionListener_create);

  jobject ret =
    env->CallStaticObjectMethod(g_SbrMediaPlayerMotionListener_clazz,
      method_id, nativeSbrMediaPlayerMotionListener, context, mediaPlayer);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_SbrMediaPlayerMotionListener_registerReceiver
    = 0;
static void Java_SbrMediaPlayerMotionListener_registerReceiver(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrMediaPlayerMotionListener_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrMediaPlayerMotionListener_clazz,
      "registerReceiver",

"("
")"
"V",
      &g_SbrMediaPlayerMotionListener_registerReceiver);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord
    g_SbrMediaPlayerMotionListener_unregisterReceiver = 0;
static void Java_SbrMediaPlayerMotionListener_unregisterReceiver(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrMediaPlayerMotionListener_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrMediaPlayerMotionListener_clazz,
      "unregisterReceiver",

"("
")"
"V",
      &g_SbrMediaPlayerMotionListener_unregisterReceiver);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrMediaPlayerMotionListener_clazz =
      reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env,
          kSbrMediaPlayerMotionListenerClassPath).obj()));
  static const JNINativeMethod kMethodsSbrMediaPlayerMotionListener[] = {
    { "nativePauseMedia",
"("
"I"
")"
"V", reinterpret_cast<void*>(PauseMedia) },
  };
  const int kMethodsSbrMediaPlayerMotionListenerSize =
      arraysize(kMethodsSbrMediaPlayerMotionListener);

  if (env->RegisterNatives(g_SbrMediaPlayerMotionListener_clazz,
                           kMethodsSbrMediaPlayerMotionListener,
                           kMethodsSbrMediaPlayerMotionListenerSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace media

#endif  // org_samsung_chrome_browser_SbrMediaPlayerMotionListener_JNI

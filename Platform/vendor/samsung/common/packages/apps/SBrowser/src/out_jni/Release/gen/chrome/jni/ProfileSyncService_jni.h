// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/sync/ProfileSyncService

#ifndef org_chromium_chrome_browser_sync_ProfileSyncService_JNI
#define org_chromium_chrome_browser_sync_ProfileSyncService_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kProfileSyncServiceClassPath[] =
    "org/chromium/chrome/browser/sync/ProfileSyncService";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_ProfileSyncService_clazz = NULL;
}  // namespace

static jint Init(JNIEnv* env, jobject obj);

// Step 2: method stubs.
static void NudgeSyncer(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid,
    jstring objectId,
    jlong version,
    jstring payload) {
  DCHECK(nativeProfileSyncServiceAndroid) << "NudgeSyncer";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->NudgeSyncer(env, obj, objectId, version, payload);
}

static void EnableSync(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "EnableSync";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->EnableSync(env, obj);
}

static void DisableSync(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "DisableSync";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->DisableSync(env, obj);
}

static void SignInSync(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid,
    jstring username,
    jstring authToken) {
  DCHECK(nativeProfileSyncServiceAndroid) << "SignInSync";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->SignInSync(env, obj, username, authToken);
}

static void SignOutSync(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "SignOutSync";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->SignOutSync(env, obj);
}

static void TokenAvailable(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid,
    jstring username,
    jstring authToken) {
  DCHECK(nativeProfileSyncServiceAndroid) << "TokenAvailable";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->TokenAvailable(env, obj, username, authToken);
}

static jboolean SetSyncSessionsId(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid,
    jstring tag) {
  DCHECK(nativeProfileSyncServiceAndroid) << "SetSyncSessionsId";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->SetSyncSessionsId(env, obj, tag);
}

static jstring QuerySyncStatusSummary(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "QuerySyncStatusSummary";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->QuerySyncStatusSummary(env, obj).Release();
}

static jint GetAuthError(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "GetAuthError";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->GetAuthError(env, obj);
}

static jboolean IsSyncInitialized(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "IsSyncInitialized";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->IsSyncInitialized(env, obj);
}

static jboolean IsFirstSetupInProgress(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "IsFirstSetupInProgress";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->IsFirstSetupInProgress(env, obj);
}

static jboolean IsEncryptEverythingEnabled(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "IsEncryptEverythingEnabled";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->IsEncryptEverythingEnabled(env, obj);
}

static void EnableEncryptEverything(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "EnableEncryptEverything";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->EnableEncryptEverything(env, obj);
}

static jboolean IsPassphraseRequiredForDecryption(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) <<
      "IsPassphraseRequiredForDecryption";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->IsPassphraseRequiredForDecryption(env, obj);
}

static jboolean IsPassphraseRequiredForExternalType(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) <<
      "IsPassphraseRequiredForExternalType";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->IsPassphraseRequiredForExternalType(env, obj);
}

static jboolean IsUsingSecondaryPassphrase(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "IsUsingSecondaryPassphrase";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->IsUsingSecondaryPassphrase(env, obj);
}

static jboolean SetDecryptionPassphrase(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid,
    jstring passphrase) {
  DCHECK(nativeProfileSyncServiceAndroid) << "SetDecryptionPassphrase";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->SetDecryptionPassphrase(env, obj, passphrase);
}

static void SetEncryptionPassphrase(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid,
    jstring passphrase,
    jboolean isGaia) {
  DCHECK(nativeProfileSyncServiceAndroid) << "SetEncryptionPassphrase";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->SetEncryptionPassphrase(env, obj, passphrase, isGaia);
}

static jboolean IsCryptographerReady(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "IsCryptographerReady";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->IsCryptographerReady(env, obj);
}

static jint GetPassphraseType(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "GetPassphraseType";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->GetPassphraseType(env, obj);
}

static jboolean HasExplicitPassphraseTime(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "HasExplicitPassphraseTime";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->HasExplicitPassphraseTime(env, obj);
}

static jstring GetSyncEnterGooglePassphraseBodyWithDateText(JNIEnv* env, jobject
    obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) <<
      "GetSyncEnterGooglePassphraseBodyWithDateText";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->GetSyncEnterGooglePassphraseBodyWithDateText(env,
      obj).Release();
}

static jstring GetSyncEnterCustomPassphraseBodyWithDateText(JNIEnv* env, jobject
    obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) <<
      "GetSyncEnterCustomPassphraseBodyWithDateText";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->GetSyncEnterCustomPassphraseBodyWithDateText(env,
      obj).Release();
}

static jstring GetCurrentSignedInAccountText(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "GetCurrentSignedInAccountText";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->GetCurrentSignedInAccountText(env, obj).Release();
}

static jstring GetSyncEnterCustomPassphraseBodyText(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) <<
      "GetSyncEnterCustomPassphraseBodyText";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->GetSyncEnterCustomPassphraseBodyText(env, obj).Release();
}

static jboolean IsSyncKeystoreMigrationDone(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "IsSyncKeystoreMigrationDone";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->IsSyncKeystoreMigrationDone(env, obj);
}

static jlong GetEnabledDataTypes(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "GetEnabledDataTypes";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->GetEnabledDataTypes(env, obj);
}

static void SetPreferredDataTypes(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid,
    jboolean syncEverything,
    jlong modelTypeSelection) {
  DCHECK(nativeProfileSyncServiceAndroid) << "SetPreferredDataTypes";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->SetPreferredDataTypes(env, obj, syncEverything,
      modelTypeSelection);
}

static void SetSetupInProgress(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid,
    jboolean inProgress) {
  DCHECK(nativeProfileSyncServiceAndroid) << "SetSetupInProgress";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->SetSetupInProgress(env, obj, inProgress);
}

static void SetSyncSetupCompleted(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "SetSyncSetupCompleted";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->SetSyncSetupCompleted(env, obj);
}

static jboolean HasSyncSetupCompleted(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "HasSyncSetupCompleted";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->HasSyncSetupCompleted(env, obj);
}

static jboolean HasKeepEverythingSynced(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "HasKeepEverythingSynced";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->HasKeepEverythingSynced(env, obj);
}

static jboolean HasUnrecoverableError(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "HasUnrecoverableError";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->HasUnrecoverableError(env, obj);
}

static jstring GetAboutInfoForTest(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid) {
  DCHECK(nativeProfileSyncServiceAndroid) << "GetAboutInfoForTest";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->GetAboutInfoForTest(env, obj).Release();
}

static void OAuth2TokenFetched(JNIEnv* env, jobject obj,
    jint nativeProfileSyncServiceAndroid,
    jint nativeCallback,
    jstring authToken,
    jboolean result) {
  DCHECK(nativeProfileSyncServiceAndroid) << "OAuth2TokenFetched";
  ProfileSyncServiceAndroid* native =
      reinterpret_cast<ProfileSyncServiceAndroid*>(nativeProfileSyncServiceAndroid);
  return native->OAuth2TokenFetched(env, obj, nativeCallback, authToken,
      result);
}

static base::subtle::AtomicWord
    g_ProfileSyncService_getProfileSyncServiceAndroid = 0;
static jint Java_ProfileSyncService_getProfileSyncServiceAndroid(JNIEnv* env,
    jobject context) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ProfileSyncService_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_ProfileSyncService_clazz,
      "getProfileSyncServiceAndroid",

"("
"Landroid/content/Context;"
")"
"I",
      &g_ProfileSyncService_getProfileSyncServiceAndroid);

  jint ret =
    env->CallStaticIntMethod(g_ProfileSyncService_clazz,
      method_id, context);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_ProfileSyncService_getNewAuthToken = 0;
static void Java_ProfileSyncService_getNewAuthToken(JNIEnv* env, jobject obj,
    jstring username,
    jstring invalidAuthToken) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ProfileSyncService_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ProfileSyncService_clazz,
      "getNewAuthToken",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_ProfileSyncService_getNewAuthToken);

  env->CallVoidMethod(obj,
      method_id, username, invalidAuthToken);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ProfileSyncService_invalidateOAuth2AuthToken =
    0;
static void Java_ProfileSyncService_invalidateOAuth2AuthToken(JNIEnv* env,
    jobject obj, jstring scope,
    jstring accessToken) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ProfileSyncService_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ProfileSyncService_clazz,
      "invalidateOAuth2AuthToken",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_ProfileSyncService_invalidateOAuth2AuthToken);

  env->CallVoidMethod(obj,
      method_id, scope, accessToken);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ProfileSyncService_getOAuth2AuthToken = 0;
static void Java_ProfileSyncService_getOAuth2AuthToken(JNIEnv* env, jobject obj,
    jstring username,
    jstring scope,
    jint nativeCallback) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ProfileSyncService_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ProfileSyncService_clazz,
      "getOAuth2AuthToken",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"I"
")"
"V",
      &g_ProfileSyncService_getOAuth2AuthToken);

  env->CallVoidMethod(obj,
      method_id, username, scope, nativeCallback);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_ProfileSyncService_syncStateChanged = 0;
static void Java_ProfileSyncService_syncStateChanged(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_ProfileSyncService_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_ProfileSyncService_clazz,
      "syncStateChanged",

"("
")"
"V",
      &g_ProfileSyncService_syncStateChanged);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_ProfileSyncService_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kProfileSyncServiceClassPath).obj()));
  static const JNINativeMethod kMethodsProfileSyncService[] = {
    { "nativeNudgeSyncer",
"("
"I"
"Ljava/lang/String;"
"J"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(NudgeSyncer) },
    { "nativeInit",
"("
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeEnableSync",
"("
"I"
")"
"V", reinterpret_cast<void*>(EnableSync) },
    { "nativeDisableSync",
"("
"I"
")"
"V", reinterpret_cast<void*>(DisableSync) },
    { "nativeSignInSync",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(SignInSync) },
    { "nativeSignOutSync",
"("
"I"
")"
"V", reinterpret_cast<void*>(SignOutSync) },
    { "nativeTokenAvailable",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(TokenAvailable) },
    { "nativeSetSyncSessionsId",
"("
"I"
"Ljava/lang/String;"
")"
"Z", reinterpret_cast<void*>(SetSyncSessionsId) },
    { "nativeQuerySyncStatusSummary",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(QuerySyncStatusSummary) },
    { "nativeGetAuthError",
"("
"I"
")"
"I", reinterpret_cast<void*>(GetAuthError) },
    { "nativeIsSyncInitialized",
"("
"I"
")"
"Z", reinterpret_cast<void*>(IsSyncInitialized) },
    { "nativeIsFirstSetupInProgress",
"("
"I"
")"
"Z", reinterpret_cast<void*>(IsFirstSetupInProgress) },
    { "nativeIsEncryptEverythingEnabled",
"("
"I"
")"
"Z", reinterpret_cast<void*>(IsEncryptEverythingEnabled) },
    { "nativeEnableEncryptEverything",
"("
"I"
")"
"V", reinterpret_cast<void*>(EnableEncryptEverything) },
    { "nativeIsPassphraseRequiredForDecryption",
"("
"I"
")"
"Z", reinterpret_cast<void*>(IsPassphraseRequiredForDecryption) },
    { "nativeIsPassphraseRequiredForExternalType",
"("
"I"
")"
"Z", reinterpret_cast<void*>(IsPassphraseRequiredForExternalType) },
    { "nativeIsUsingSecondaryPassphrase",
"("
"I"
")"
"Z", reinterpret_cast<void*>(IsUsingSecondaryPassphrase) },
    { "nativeSetDecryptionPassphrase",
"("
"I"
"Ljava/lang/String;"
")"
"Z", reinterpret_cast<void*>(SetDecryptionPassphrase) },
    { "nativeSetEncryptionPassphrase",
"("
"I"
"Ljava/lang/String;"
"Z"
")"
"V", reinterpret_cast<void*>(SetEncryptionPassphrase) },
    { "nativeIsCryptographerReady",
"("
"I"
")"
"Z", reinterpret_cast<void*>(IsCryptographerReady) },
    { "nativeGetPassphraseType",
"("
"I"
")"
"I", reinterpret_cast<void*>(GetPassphraseType) },
    { "nativeHasExplicitPassphraseTime",
"("
"I"
")"
"Z", reinterpret_cast<void*>(HasExplicitPassphraseTime) },
    { "nativeGetSyncEnterGooglePassphraseBodyWithDateText",
"("
"I"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(GetSyncEnterGooglePassphraseBodyWithDateText) },
    { "nativeGetSyncEnterCustomPassphraseBodyWithDateText",
"("
"I"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(GetSyncEnterCustomPassphraseBodyWithDateText) },
    { "nativeGetCurrentSignedInAccountText",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCurrentSignedInAccountText) },
    { "nativeGetSyncEnterCustomPassphraseBodyText",
"("
"I"
")"
"Ljava/lang/String;",
    reinterpret_cast<void*>(GetSyncEnterCustomPassphraseBodyText) },
    { "nativeIsSyncKeystoreMigrationDone",
"("
"I"
")"
"Z", reinterpret_cast<void*>(IsSyncKeystoreMigrationDone) },
    { "nativeGetEnabledDataTypes",
"("
"I"
")"
"J", reinterpret_cast<void*>(GetEnabledDataTypes) },
    { "nativeSetPreferredDataTypes",
"("
"I"
"Z"
"J"
")"
"V", reinterpret_cast<void*>(SetPreferredDataTypes) },
    { "nativeSetSetupInProgress",
"("
"I"
"Z"
")"
"V", reinterpret_cast<void*>(SetSetupInProgress) },
    { "nativeSetSyncSetupCompleted",
"("
"I"
")"
"V", reinterpret_cast<void*>(SetSyncSetupCompleted) },
    { "nativeHasSyncSetupCompleted",
"("
"I"
")"
"Z", reinterpret_cast<void*>(HasSyncSetupCompleted) },
    { "nativeHasKeepEverythingSynced",
"("
"I"
")"
"Z", reinterpret_cast<void*>(HasKeepEverythingSynced) },
    { "nativeHasUnrecoverableError",
"("
"I"
")"
"Z", reinterpret_cast<void*>(HasUnrecoverableError) },
    { "nativeGetAboutInfoForTest",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetAboutInfoForTest) },
    { "nativeOAuth2TokenFetched",
"("
"I"
"I"
"Ljava/lang/String;"
"Z"
")"
"V", reinterpret_cast<void*>(OAuth2TokenFetched) },
  };
  const int kMethodsProfileSyncServiceSize =
      arraysize(kMethodsProfileSyncService);

  if (env->RegisterNatives(g_ProfileSyncService_clazz,
                           kMethodsProfileSyncService,
                           kMethodsProfileSyncServiceSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_sync_ProfileSyncService_JNI

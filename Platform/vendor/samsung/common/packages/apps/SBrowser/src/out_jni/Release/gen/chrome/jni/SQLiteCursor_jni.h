// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/database/SQLiteCursor

#ifndef org_chromium_chrome_browser_database_SQLiteCursor_JNI
#define org_chromium_chrome_browser_database_SQLiteCursor_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSQLiteCursorClassPath[] =
    "org/chromium/chrome/browser/database/SQLiteCursor";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SQLiteCursor_clazz = NULL;
}  // namespace

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeSQLiteCursor) {
  DCHECK(nativeSQLiteCursor) << "Destroy";
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  return native->Destroy(env, obj);
}

static jint GetCount(JNIEnv* env, jobject obj,
    jint nativeSQLiteCursor) {
  DCHECK(nativeSQLiteCursor) << "GetCount";
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  return native->GetCount(env, obj);
}

static jobjectArray GetColumnNames(JNIEnv* env, jobject obj,
    jint nativeSQLiteCursor) {
  DCHECK(nativeSQLiteCursor) << "GetColumnNames";
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  return native->GetColumnNames(env, obj).Release();
}

static jint GetColumnType(JNIEnv* env, jobject obj,
    jint nativeSQLiteCursor,
    jint column) {
  DCHECK(nativeSQLiteCursor) << "GetColumnType";
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  return native->GetColumnType(env, obj, column);
}

static jstring GetString(JNIEnv* env, jobject obj,
    jint nativeSQLiteCursor,
    jint column) {
  DCHECK(nativeSQLiteCursor) << "GetString";
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  return native->GetString(env, obj, column).Release();
}

static jbyteArray GetBlob(JNIEnv* env, jobject obj,
    jint nativeSQLiteCursor,
    jint column) {
  DCHECK(nativeSQLiteCursor) << "GetBlob";
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  return native->GetBlob(env, obj, column).Release();
}

static jboolean IsNull(JNIEnv* env, jobject obj,
    jint nativeSQLiteCursor,
    jint column) {
  DCHECK(nativeSQLiteCursor) << "IsNull";
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  return native->IsNull(env, obj, column);
}

static jlong GetLong(JNIEnv* env, jobject obj,
    jint nativeSQLiteCursor,
    jint column) {
  DCHECK(nativeSQLiteCursor) << "GetLong";
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  return native->GetLong(env, obj, column);
}

static jint GetInt(JNIEnv* env, jobject obj,
    jint nativeSQLiteCursor,
    jint column) {
  DCHECK(nativeSQLiteCursor) << "GetInt";
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  return native->GetInt(env, obj, column);
}

static jdouble GetDouble(JNIEnv* env, jobject obj,
    jint nativeSQLiteCursor,
    jint column) {
  DCHECK(nativeSQLiteCursor) << "GetDouble";
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  return native->GetDouble(env, obj, column);
}

static jint MoveTo(JNIEnv* env, jobject obj,
    jint nativeSQLiteCursor,
    jint newPosition) {
  DCHECK(nativeSQLiteCursor) << "MoveTo";
  SQLiteCursor* native = reinterpret_cast<SQLiteCursor*>(nativeSQLiteCursor);
  return native->MoveTo(env, obj, newPosition);
}

static base::subtle::AtomicWord g_SQLiteCursor_create = 0;
static ScopedJavaLocalRef<jobject> Java_SQLiteCursor_create(JNIEnv* env, jint
    nativeSQLiteCursor) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SQLiteCursor_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_SQLiteCursor_clazz,
      "create",

"("
"I"
")"
"Lorg/chromium/chrome/browser/database/SQLiteCursor;",
      &g_SQLiteCursor_create);

  jobject ret =
    env->CallStaticObjectMethod(g_SQLiteCursor_clazz,
      method_id, nativeSQLiteCursor);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SQLiteCursor_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSQLiteCursorClassPath).obj()));
  static const JNINativeMethod kMethodsSQLiteCursor[] = {
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeGetCount",
"("
"I"
")"
"I", reinterpret_cast<void*>(GetCount) },
    { "nativeGetColumnNames",
"("
"I"
")"
"[Ljava/lang/String;", reinterpret_cast<void*>(GetColumnNames) },
    { "nativeGetColumnType",
"("
"I"
"I"
")"
"I", reinterpret_cast<void*>(GetColumnType) },
    { "nativeGetString",
"("
"I"
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetString) },
    { "nativeGetBlob",
"("
"I"
"I"
")"
"[B", reinterpret_cast<void*>(GetBlob) },
    { "nativeIsNull",
"("
"I"
"I"
")"
"Z", reinterpret_cast<void*>(IsNull) },
    { "nativeGetLong",
"("
"I"
"I"
")"
"J", reinterpret_cast<void*>(GetLong) },
    { "nativeGetInt",
"("
"I"
"I"
")"
"I", reinterpret_cast<void*>(GetInt) },
    { "nativeGetDouble",
"("
"I"
"I"
")"
"D", reinterpret_cast<void*>(GetDouble) },
    { "nativeMoveTo",
"("
"I"
"I"
")"
"I", reinterpret_cast<void*>(MoveTo) },
  };
  const int kMethodsSQLiteCursorSize = arraysize(kMethodsSQLiteCursor);

  if (env->RegisterNatives(g_SQLiteCursor_clazz,
                           kMethodsSQLiteCursor,
                           kMethodsSQLiteCursorSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_database_SQLiteCursor_JNI

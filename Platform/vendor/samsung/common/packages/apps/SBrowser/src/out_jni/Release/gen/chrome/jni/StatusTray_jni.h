// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/StatusTray

#ifndef org_chromium_chrome_browser_StatusTray_JNI
#define org_chromium_chrome_browser_StatusTray_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kStatusTrayClassPath[] = "org/chromium/chrome/browser/StatusTray";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_StatusTray_clazz = NULL;
}  // namespace

// Step 2: method stubs.

static base::subtle::AtomicWord g_StatusTray_create = 0;
static ScopedJavaLocalRef<jobject> Java_StatusTray_create(JNIEnv* env, jobject
    context) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_StatusTray_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_StatusTray_clazz,
      "create",

"("
"Landroid/content/Context;"
")"
"Lorg/chromium/chrome/browser/StatusTray;",
      &g_StatusTray_create);

  jobject ret =
    env->CallStaticObjectMethod(g_StatusTray_clazz,
      method_id, context);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_StatusTray_createMediaCaptureStatusNotification = 0;
static void Java_StatusTray_createMediaCaptureStatusNotification(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_StatusTray_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_StatusTray_clazz,
      "createMediaCaptureStatusNotification",

"("
")"
"V",
      &g_StatusTray_createMediaCaptureStatusNotification);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_StatusTray_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kStatusTrayClassPath).obj()));
  return true;
}

#endif  // org_chromium_chrome_browser_StatusTray_JNI

// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/media/AudioManagerAndroid

#ifndef org_chromium_media_AudioManagerAndroid_JNI
#define org_chromium_media_AudioManagerAndroid_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kAudioManagerAndroidClassPath[] =
    "org/chromium/media/AudioManagerAndroid";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_AudioManagerAndroid_clazz = NULL;
}  // namespace

namespace media {

// Step 2: method stubs.

static base::subtle::AtomicWord g_AudioManagerAndroid_setMode = 0;
static void Java_AudioManagerAndroid_setMode(JNIEnv* env, jobject obj, jint
    mode) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioManagerAndroid_clazz,
      "setMode",

"("
"I"
")"
"V",
      &g_AudioManagerAndroid_setMode);

  env->CallVoidMethod(obj,
      method_id, mode);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_AudioManagerAndroid_createAudioManagerAndroid
    = 0;
static ScopedJavaLocalRef<jobject>
    Java_AudioManagerAndroid_createAudioManagerAndroid(JNIEnv* env, jobject
    context) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_AudioManagerAndroid_clazz,
      "createAudioManagerAndroid",

"("
"Landroid/content/Context;"
")"
"Lorg/chromium/media/AudioManagerAndroid;",
      &g_AudioManagerAndroid_createAudioManagerAndroid);

  jobject ret =
    env->CallStaticObjectMethod(g_AudioManagerAndroid_clazz,
      method_id, context);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_AudioManagerAndroid_registerHeadsetReceiver =
    0;
static void Java_AudioManagerAndroid_registerHeadsetReceiver(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioManagerAndroid_clazz,
      "registerHeadsetReceiver",

"("
")"
"V",
      &g_AudioManagerAndroid_registerHeadsetReceiver);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_AudioManagerAndroid_unregisterHeadsetReceiver
    = 0;
static void Java_AudioManagerAndroid_unregisterHeadsetReceiver(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_AudioManagerAndroid_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_AudioManagerAndroid_clazz,
      "unregisterHeadsetReceiver",

"("
")"
"V",
      &g_AudioManagerAndroid_unregisterHeadsetReceiver);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_AudioManagerAndroid_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kAudioManagerAndroidClassPath).obj()));
  return true;
}
}  // namespace media

#endif  // org_chromium_media_AudioManagerAndroid_JNI

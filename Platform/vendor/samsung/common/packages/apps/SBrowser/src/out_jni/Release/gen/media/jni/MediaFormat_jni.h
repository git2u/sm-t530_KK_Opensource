// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     android/media/MediaFormat

#ifndef android_media_MediaFormat_JNI
#define android_media_MediaFormat_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kMediaFormatClassPath[] = "android/media/MediaFormat";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_MediaFormat_clazz = NULL;
}  // namespace

namespace JNI_MediaFormat {

// Step 2: method stubs.

static base::subtle::AtomicWord g_MediaFormat_containsKey = 0;
static jboolean Java_MediaFormat_containsKey(JNIEnv* env, jobject obj, jstring
    p0) __attribute__ ((unused));
static jboolean Java_MediaFormat_containsKey(JNIEnv* env, jobject obj, jstring
    p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "containsKey",

"("
"Ljava/lang/String;"
")"
"Z",
      &g_MediaFormat_containsKey);

  jboolean ret =
    env->CallBooleanMethod(obj,
      method_id, p0);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaFormat_getInteger = 0;
static jint Java_MediaFormat_getInteger(JNIEnv* env, jobject obj, jstring p0)
    __attribute__ ((unused));
static jint Java_MediaFormat_getInteger(JNIEnv* env, jobject obj, jstring p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "getInteger",

"("
"Ljava/lang/String;"
")"
"I",
      &g_MediaFormat_getInteger);

  jint ret =
    env->CallIntMethod(obj,
      method_id, p0);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaFormat_getLong = 0;
static jlong Java_MediaFormat_getLong(JNIEnv* env, jobject obj, jstring p0)
    __attribute__ ((unused));
static jlong Java_MediaFormat_getLong(JNIEnv* env, jobject obj, jstring p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "getLong",

"("
"Ljava/lang/String;"
")"
"J",
      &g_MediaFormat_getLong);

  jlong ret =
    env->CallLongMethod(obj,
      method_id, p0);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaFormat_getFloat = 0;
static jfloat Java_MediaFormat_getFloat(JNIEnv* env, jobject obj, jstring p0)
    __attribute__ ((unused));
static jfloat Java_MediaFormat_getFloat(JNIEnv* env, jobject obj, jstring p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "getFloat",

"("
"Ljava/lang/String;"
")"
"F",
      &g_MediaFormat_getFloat);

  jfloat ret =
    env->CallFloatMethod(obj,
      method_id, p0);
  base::android::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaFormat_getString = 0;
static ScopedJavaLocalRef<jstring> Java_MediaFormat_getString(JNIEnv* env,
    jobject obj, jstring p0) __attribute__ ((unused));
static ScopedJavaLocalRef<jstring> Java_MediaFormat_getString(JNIEnv* env,
    jobject obj, jstring p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "getString",

"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
      &g_MediaFormat_getString);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id, p0));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_MediaFormat_getByteBuffer = 0;
static ScopedJavaLocalRef<jobject> Java_MediaFormat_getByteBuffer(JNIEnv* env,
    jobject obj, jstring p0) __attribute__ ((unused));
static ScopedJavaLocalRef<jobject> Java_MediaFormat_getByteBuffer(JNIEnv* env,
    jobject obj, jstring p0) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "getByteBuffer",

"("
"Ljava/lang/String;"
")"
"Ljava/nio/ByteBuffer;",
      &g_MediaFormat_getByteBuffer);

  jobject ret =
    env->CallObjectMethod(obj,
      method_id, p0);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_MediaFormat_setInteger = 0;
static void Java_MediaFormat_setInteger(JNIEnv* env, jobject obj, jstring p0,
    jint p1) __attribute__ ((unused));
static void Java_MediaFormat_setInteger(JNIEnv* env, jobject obj, jstring p0,
    jint p1) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "setInteger",

"("
"Ljava/lang/String;"
"I"
")"
"V",
      &g_MediaFormat_setInteger);

  env->CallVoidMethod(obj,
      method_id, p0, p1);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaFormat_setLong = 0;
static void Java_MediaFormat_setLong(JNIEnv* env, jobject obj, jstring p0,
    jlong p1) __attribute__ ((unused));
static void Java_MediaFormat_setLong(JNIEnv* env, jobject obj, jstring p0,
    jlong p1) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "setLong",

"("
"Ljava/lang/String;"
"J"
")"
"V",
      &g_MediaFormat_setLong);

  env->CallVoidMethod(obj,
      method_id, p0, p1);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaFormat_setFloat = 0;
static void Java_MediaFormat_setFloat(JNIEnv* env, jobject obj, jstring p0,
    jfloat p1) __attribute__ ((unused));
static void Java_MediaFormat_setFloat(JNIEnv* env, jobject obj, jstring p0,
    jfloat p1) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "setFloat",

"("
"Ljava/lang/String;"
"F"
")"
"V",
      &g_MediaFormat_setFloat);

  env->CallVoidMethod(obj,
      method_id, p0, p1);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaFormat_setString = 0;
static void Java_MediaFormat_setString(JNIEnv* env, jobject obj, jstring p0,
    jstring p1) __attribute__ ((unused));
static void Java_MediaFormat_setString(JNIEnv* env, jobject obj, jstring p0,
    jstring p1) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "setString",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_MediaFormat_setString);

  env->CallVoidMethod(obj,
      method_id, p0, p1);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaFormat_setByteBuffer = 0;
static void Java_MediaFormat_setByteBuffer(JNIEnv* env, jobject obj, jstring p0,
    jobject p1) __attribute__ ((unused));
static void Java_MediaFormat_setByteBuffer(JNIEnv* env, jobject obj, jstring p0,
    jobject p1) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "setByteBuffer",

"("
"Ljava/lang/String;"
"Ljava/nio/ByteBuffer;"
")"
"V",
      &g_MediaFormat_setByteBuffer);

  env->CallVoidMethod(obj,
      method_id, p0, p1);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_MediaFormat_createAudioFormat = 0;
static ScopedJavaLocalRef<jobject> Java_MediaFormat_createAudioFormat(JNIEnv*
    env, jstring p0,
    jint p1,
    jint p2) __attribute__ ((unused));
static ScopedJavaLocalRef<jobject> Java_MediaFormat_createAudioFormat(JNIEnv*
    env, jstring p0,
    jint p1,
    jint p2) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_MediaFormat_clazz,
      "createAudioFormat",

"("
"Ljava/lang/String;"
"I"
"I"
")"
"Landroid/media/MediaFormat;",
      &g_MediaFormat_createAudioFormat);

  jobject ret =
    env->CallStaticObjectMethod(g_MediaFormat_clazz,
      method_id, p0, p1, p2);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_MediaFormat_createVideoFormat = 0;
static ScopedJavaLocalRef<jobject> Java_MediaFormat_createVideoFormat(JNIEnv*
    env, jstring p0,
    jint p1,
    jint p2) __attribute__ ((unused));
static ScopedJavaLocalRef<jobject> Java_MediaFormat_createVideoFormat(JNIEnv*
    env, jstring p0,
    jint p1,
    jint p2) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_MediaFormat_clazz,
      "createVideoFormat",

"("
"Ljava/lang/String;"
"I"
"I"
")"
"Landroid/media/MediaFormat;",
      &g_MediaFormat_createVideoFormat);

  jobject ret =
    env->CallStaticObjectMethod(g_MediaFormat_clazz,
      method_id, p0, p1, p2);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_MediaFormat_toString = 0;
static ScopedJavaLocalRef<jstring> Java_MediaFormat_toString(JNIEnv* env,
    jobject obj) __attribute__ ((unused));
static ScopedJavaLocalRef<jstring> Java_MediaFormat_toString(JNIEnv* env,
    jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "toString",

"("
")"
"Ljava/lang/String;",
      &g_MediaFormat_toString);

  jstring ret =
    static_cast<jstring>(env->CallObjectMethod(obj,
      method_id));
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_MediaFormat_Constructor = 0;
static ScopedJavaLocalRef<jobject> Java_MediaFormat_Constructor(JNIEnv* env)
    __attribute__ ((unused));
static ScopedJavaLocalRef<jobject> Java_MediaFormat_Constructor(JNIEnv* env) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_MediaFormat_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_MediaFormat_clazz,
      "<init>",

"("
")"
"V",
      &g_MediaFormat_Constructor);

  jobject ret =
    env->NewObject(g_MediaFormat_clazz,
      method_id);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_MediaFormat_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kMediaFormatClassPath).obj()));
  return true;
}
}  // namespace JNI_MediaFormat

#endif  // android_media_MediaFormat_JNI

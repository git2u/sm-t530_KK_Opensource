// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/WebsiteSettingsPopup

#ifndef org_chromium_chrome_browser_WebsiteSettingsPopup_JNI
#define org_chromium_chrome_browser_WebsiteSettingsPopup_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kWebsiteSettingsPopupClassPath[] =
    "org/chromium/chrome/browser/WebsiteSettingsPopup";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_WebsiteSettingsPopup_clazz = NULL;
}  // namespace

static jobjectArray GetCertificateChain(JNIEnv* env, jobject obj,
    jobject contentViewCore);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeWebsiteSettingsPopupAndroid) {
  DCHECK(nativeWebsiteSettingsPopupAndroid) << "Destroy";
  WebsiteSettingsPopupAndroid* native =
      reinterpret_cast<WebsiteSettingsPopupAndroid*>(nativeWebsiteSettingsPopupAndroid);
  return native->Destroy(env, obj);
}

static base::subtle::AtomicWord g_WebsiteSettingsPopup_addSection = 0;
static void Java_WebsiteSettingsPopup_addSection(JNIEnv* env, jobject obj,
    jobject icon,
    jstring headline,
    jstring description) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebsiteSettingsPopup_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebsiteSettingsPopup_clazz,
      "addSection",

"("
"Landroid/graphics/Bitmap;"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"V",
      &g_WebsiteSettingsPopup_addSection);

  env->CallVoidMethod(obj,
      method_id, icon, headline, description);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebsiteSettingsPopup_addDivider = 0;
static void Java_WebsiteSettingsPopup_addDivider(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebsiteSettingsPopup_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebsiteSettingsPopup_clazz,
      "addDivider",

"("
")"
"V",
      &g_WebsiteSettingsPopup_addDivider);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebsiteSettingsPopup_setCertificateViewer = 0;
static void Java_WebsiteSettingsPopup_setCertificateViewer(JNIEnv* env, jobject
    obj, jstring label) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebsiteSettingsPopup_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebsiteSettingsPopup_clazz,
      "setCertificateViewer",

"("
"Ljava/lang/String;"
")"
"V",
      &g_WebsiteSettingsPopup_setCertificateViewer);

  env->CallVoidMethod(obj,
      method_id, label);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebsiteSettingsPopup_addMoreInfoLink = 0;
static void Java_WebsiteSettingsPopup_addMoreInfoLink(JNIEnv* env, jobject obj,
    jstring linkText) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebsiteSettingsPopup_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebsiteSettingsPopup_clazz,
      "addMoreInfoLink",

"("
"Ljava/lang/String;"
")"
"V",
      &g_WebsiteSettingsPopup_addMoreInfoLink);

  env->CallVoidMethod(obj,
      method_id, linkText);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebsiteSettingsPopup_show = 0;
static void Java_WebsiteSettingsPopup_show(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebsiteSettingsPopup_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_WebsiteSettingsPopup_clazz,
      "show",

"("
")"
"V",
      &g_WebsiteSettingsPopup_show);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_WebsiteSettingsPopup_create = 0;
static ScopedJavaLocalRef<jobject> Java_WebsiteSettingsPopup_create(JNIEnv* env,
    jobject context,
    jobject contentViewCore,
    jint nativeWebsiteSettingsPopup) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_WebsiteSettingsPopup_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_WebsiteSettingsPopup_clazz,
      "create",

"("
"Landroid/content/Context;"
"Lorg/chromium/content/browser/ContentViewCore;"
"I"
")"
"Lorg/chromium/chrome/browser/WebsiteSettingsPopup;",
      &g_WebsiteSettingsPopup_create);

  jobject ret =
    env->CallStaticObjectMethod(g_WebsiteSettingsPopup_clazz,
      method_id, context, contentViewCore, nativeWebsiteSettingsPopup);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_WebsiteSettingsPopup_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kWebsiteSettingsPopupClassPath).obj()));
  static const JNINativeMethod kMethodsWebsiteSettingsPopup[] = {
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeGetCertificateChain",
"("
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"[[B", reinterpret_cast<void*>(GetCertificateChain) },
  };
  const int kMethodsWebsiteSettingsPopupSize =
      arraysize(kMethodsWebsiteSettingsPopup);

  if (env->RegisterNatives(g_WebsiteSettingsPopup_clazz,
                           kMethodsWebsiteSettingsPopup,
                           kMethodsWebsiteSettingsPopupSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_WebsiteSettingsPopup_JNI

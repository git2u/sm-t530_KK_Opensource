// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/content/sbrowser/SbrFindOnPage

#ifndef org_samsung_content_sbrowser_SbrFindOnPage_JNI
#define org_samsung_content_sbrowser_SbrFindOnPage_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrFindOnPageClassPath[] =
    "org/samsung/content/sbrowser/SbrFindOnPage";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrFindOnPage_clazz = NULL;
}  // namespace

namespace content {

static jint Init(JNIEnv* env, jobject obj,
    jint webContentsPtr);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeFindOnPage) {
  DCHECK(nativeFindOnPage) << "Destroy";
  FindOnPage* native = reinterpret_cast<FindOnPage*>(nativeFindOnPage);
  return native->Destroy(env, obj);
}

static void StartFinding(JNIEnv* env, jobject obj,
    jint nativeFindOnPage,
    jstring searchString,
    jboolean forwardDirection,
    jboolean caseSensitive) {
  DCHECK(nativeFindOnPage) << "StartFinding";
  FindOnPage* native = reinterpret_cast<FindOnPage*>(nativeFindOnPage);
  return native->StartFinding(env, obj, searchString, forwardDirection,
      caseSensitive);
}

static void StopFinding(JNIEnv* env, jobject obj,
    jint nativeFindOnPage,
    jint selectionAction) {
  DCHECK(nativeFindOnPage) << "StopFinding";
  FindOnPage* native = reinterpret_cast<FindOnPage*>(nativeFindOnPage);
  return native->StopFinding(env, obj, selectionAction);
}

static jstring GetPreviousFindText(JNIEnv* env, jobject obj,
    jint nativeFindOnPage) {
  DCHECK(nativeFindOnPage) << "GetPreviousFindText";
  FindOnPage* native = reinterpret_cast<FindOnPage*>(nativeFindOnPage);
  return native->GetPreviousFindText(env, obj).Release();
}

static void ActivateNearestFindResult(JNIEnv* env, jobject obj,
    jint nativeFindOnPage,
    jfloat x,
    jfloat y) {
  DCHECK(nativeFindOnPage) << "ActivateNearestFindResult";
  FindOnPage* native = reinterpret_cast<FindOnPage*>(nativeFindOnPage);
  return native->ActivateNearestFindResult(env, obj, x, y);
}

static void SetSbrFindOnPageDelegate(JNIEnv* env, jobject obj,
    jint nativeFindOnPage,
    jobject sbrFindOnPageDelegate) {
  DCHECK(nativeFindOnPage) << "SetSbrFindOnPageDelegate";
  FindOnPage* native = reinterpret_cast<FindOnPage*>(nativeFindOnPage);
  return native->SetSbrFindOnPageDelegate(env, obj, sbrFindOnPageDelegate);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrFindOnPage_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrFindOnPageClassPath).obj()));
  static const JNINativeMethod kMethodsSbrFindOnPage[] = {
    { "nativeInit",
"("
"I"
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeStartFinding",
"("
"I"
"Ljava/lang/String;"
"Z"
"Z"
")"
"V", reinterpret_cast<void*>(StartFinding) },
    { "nativeStopFinding",
"("
"I"
"I"
")"
"V", reinterpret_cast<void*>(StopFinding) },
    { "nativeGetPreviousFindText",
"("
"I"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetPreviousFindText) },
    { "nativeActivateNearestFindResult",
"("
"I"
"F"
"F"
")"
"V", reinterpret_cast<void*>(ActivateNearestFindResult) },
    { "nativeSetSbrFindOnPageDelegate",
"("
"I"
"Lorg/samsung/content/sbrowser/SbrFindOnPageDelegate;"
")"
"V", reinterpret_cast<void*>(SetSbrFindOnPageDelegate) },
  };
  const int kMethodsSbrFindOnPageSize = arraysize(kMethodsSbrFindOnPage);

  if (env->RegisterNatives(g_SbrFindOnPage_clazz,
                           kMethodsSbrFindOnPage,
                           kMethodsSbrFindOnPageSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}
}  // namespace content

#endif  // org_samsung_content_sbrowser_SbrFindOnPage_JNI

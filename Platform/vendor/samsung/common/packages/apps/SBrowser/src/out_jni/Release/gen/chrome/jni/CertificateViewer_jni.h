// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/CertificateViewer

#ifndef org_chromium_chrome_browser_CertificateViewer_JNI
#define org_chromium_chrome_browser_CertificateViewer_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kCertificateViewerClassPath[] =
    "org/chromium/chrome/browser/CertificateViewer";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_CertificateViewer_clazz = NULL;
}  // namespace

static jstring GetCertIssuedToText(JNIEnv* env, jclass clazz);

static jstring GetCertInfoCommonNameText(JNIEnv* env, jclass clazz);

static jstring GetCertInfoOrganizationText(JNIEnv* env, jclass clazz);

static jstring GetCertInfoSerialNumberText(JNIEnv* env, jclass clazz);

static jstring GetCertInfoOrganizationUnitText(JNIEnv* env, jclass clazz);

static jstring GetCertIssuedByText(JNIEnv* env, jclass clazz);

static jstring GetCertValidityText(JNIEnv* env, jclass clazz);

static jstring GetCertIssuedOnText(JNIEnv* env, jclass clazz);

static jstring GetCertExpiresOnText(JNIEnv* env, jclass clazz);

static jstring GetCertFingerprintsText(JNIEnv* env, jclass clazz);

static jstring GetCertSHA256FingerprintText(JNIEnv* env, jclass clazz);

static jstring GetCertSHA1FingerprintText(JNIEnv* env, jclass clazz);

// Step 2: method stubs.

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_CertificateViewer_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kCertificateViewerClassPath).obj()));
  static const JNINativeMethod kMethodsCertificateViewer[] = {
    { "nativeGetCertIssuedToText",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCertIssuedToText) },
    { "nativeGetCertInfoCommonNameText",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCertInfoCommonNameText) },
    { "nativeGetCertInfoOrganizationText",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCertInfoOrganizationText) },
    { "nativeGetCertInfoSerialNumberText",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCertInfoSerialNumberText) },
    { "nativeGetCertInfoOrganizationUnitText",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCertInfoOrganizationUnitText)
    },
    { "nativeGetCertIssuedByText",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCertIssuedByText) },
    { "nativeGetCertValidityText",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCertValidityText) },
    { "nativeGetCertIssuedOnText",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCertIssuedOnText) },
    { "nativeGetCertExpiresOnText",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCertExpiresOnText) },
    { "nativeGetCertFingerprintsText",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCertFingerprintsText) },
    { "nativeGetCertSHA256FingerprintText",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCertSHA256FingerprintText) },
    { "nativeGetCertSHA1FingerprintText",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetCertSHA1FingerprintText) },
  };
  const int kMethodsCertificateViewerSize =
      arraysize(kMethodsCertificateViewer);

  if (env->RegisterNatives(g_CertificateViewer_clazz,
                           kMethodsCertificateViewer,
                           kMethodsCertificateViewerSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_CertificateViewer_JNI

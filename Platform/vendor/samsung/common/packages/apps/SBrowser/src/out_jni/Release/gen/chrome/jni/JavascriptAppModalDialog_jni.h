// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/JavascriptAppModalDialog

#ifndef org_chromium_chrome_browser_JavascriptAppModalDialog_JNI
#define org_chromium_chrome_browser_JavascriptAppModalDialog_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kJavascriptAppModalDialogClassPath[] =
    "org/chromium/chrome/browser/JavascriptAppModalDialog";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_JavascriptAppModalDialog_clazz = NULL;
}  // namespace

static jobject GetCurrentModalDialog(JNIEnv* env, jclass clazz);

// Step 2: method stubs.
static void DidAcceptAppModalDialog(JNIEnv* env, jobject obj,
    jint nativeJavascriptAppModalDialogAndroid,
    jstring prompt,
    jboolean suppress) {
  DCHECK(nativeJavascriptAppModalDialogAndroid) << "DidAcceptAppModalDialog";
  JavascriptAppModalDialogAndroid* native =
      reinterpret_cast<JavascriptAppModalDialogAndroid*>(nativeJavascriptAppModalDialogAndroid);
  return native->DidAcceptAppModalDialog(env, obj, prompt, suppress);
}

static void DidCancelAppModalDialog(JNIEnv* env, jobject obj,
    jint nativeJavascriptAppModalDialogAndroid,
    jboolean suppress) {
  DCHECK(nativeJavascriptAppModalDialogAndroid) << "DidCancelAppModalDialog";
  JavascriptAppModalDialogAndroid* native =
      reinterpret_cast<JavascriptAppModalDialogAndroid*>(nativeJavascriptAppModalDialogAndroid);
  return native->DidCancelAppModalDialog(env, obj, suppress);
}

static base::subtle::AtomicWord g_JavascriptAppModalDialog_createAlertDialog =
    0;
static ScopedJavaLocalRef<jobject>
    Java_JavascriptAppModalDialog_createAlertDialog(JNIEnv* env, jstring title,
    jstring message,
    jboolean shouldShowSuppressCheckBox) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_JavascriptAppModalDialog_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_JavascriptAppModalDialog_clazz,
      "createAlertDialog",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"Lorg/chromium/chrome/browser/JavascriptAppModalDialog;",
      &g_JavascriptAppModalDialog_createAlertDialog);

  jobject ret =
    env->CallStaticObjectMethod(g_JavascriptAppModalDialog_clazz,
      method_id, title, message, shouldShowSuppressCheckBox);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_JavascriptAppModalDialog_createConfirmDialog =
    0;
static ScopedJavaLocalRef<jobject>
    Java_JavascriptAppModalDialog_createConfirmDialog(JNIEnv* env, jstring
    title,
    jstring message,
    jboolean shouldShowSuppressCheckBox) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_JavascriptAppModalDialog_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_JavascriptAppModalDialog_clazz,
      "createConfirmDialog",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
")"
"Lorg/chromium/chrome/browser/JavascriptAppModalDialog;",
      &g_JavascriptAppModalDialog_createConfirmDialog);

  jobject ret =
    env->CallStaticObjectMethod(g_JavascriptAppModalDialog_clazz,
      method_id, title, message, shouldShowSuppressCheckBox);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_JavascriptAppModalDialog_createBeforeUnloadDialog = 0;
static ScopedJavaLocalRef<jobject>
    Java_JavascriptAppModalDialog_createBeforeUnloadDialog(JNIEnv* env, jstring
    title,
    jstring message,
    jboolean isReload,
    jboolean shouldShowSuppressCheckBox) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_JavascriptAppModalDialog_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_JavascriptAppModalDialog_clazz,
      "createBeforeUnloadDialog",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
"Z"
")"
"Lorg/chromium/chrome/browser/JavascriptAppModalDialog;",
      &g_JavascriptAppModalDialog_createBeforeUnloadDialog);

  jobject ret =
    env->CallStaticObjectMethod(g_JavascriptAppModalDialog_clazz,
      method_id, title, message, isReload, shouldShowSuppressCheckBox);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_JavascriptAppModalDialog_createPromptDialog =
    0;
static ScopedJavaLocalRef<jobject>
    Java_JavascriptAppModalDialog_createPromptDialog(JNIEnv* env, jstring title,
    jstring message,
    jboolean shouldShowSuppressCheckBox,
    jstring defaultPromptText) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_JavascriptAppModalDialog_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, g_JavascriptAppModalDialog_clazz,
      "createPromptDialog",

"("
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
"Ljava/lang/String;"
")"
"Lorg/chromium/chrome/browser/JavascriptAppModalDialog;",
      &g_JavascriptAppModalDialog_createPromptDialog);

  jobject ret =
    env->CallStaticObjectMethod(g_JavascriptAppModalDialog_clazz,
      method_id, title, message, shouldShowSuppressCheckBox, defaultPromptText);
  base::android::CheckException(env);
  return ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_JavascriptAppModalDialog_showJavascriptAppModalDialog = 0;
static void Java_JavascriptAppModalDialog_showJavascriptAppModalDialog(JNIEnv*
    env, jobject obj, jobject window,
    jint nativeDialogPointer) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_JavascriptAppModalDialog_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_JavascriptAppModalDialog_clazz,
      "showJavascriptAppModalDialog",

"("
"Lorg/chromium/ui/WindowAndroid;"
"I"
")"
"V",
      &g_JavascriptAppModalDialog_showJavascriptAppModalDialog);

  env->CallVoidMethod(obj,
      method_id, window, nativeDialogPointer);
  base::android::CheckException(env);

}

static base::subtle::AtomicWord g_JavascriptAppModalDialog_dismiss = 0;
static void Java_JavascriptAppModalDialog_dismiss(JNIEnv* env, jobject obj) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_JavascriptAppModalDialog_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_JavascriptAppModalDialog_clazz,
      "dismiss",

"("
")"
"V",
      &g_JavascriptAppModalDialog_dismiss);

  env->CallVoidMethod(obj,
      method_id);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_JavascriptAppModalDialog_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kJavascriptAppModalDialogClassPath).obj()));
  static const JNINativeMethod kMethodsJavascriptAppModalDialog[] = {
    { "nativeDidAcceptAppModalDialog",
"("
"I"
"Ljava/lang/String;"
"Z"
")"
"V", reinterpret_cast<void*>(DidAcceptAppModalDialog) },
    { "nativeDidCancelAppModalDialog",
"("
"I"
"Z"
")"
"V", reinterpret_cast<void*>(DidCancelAppModalDialog) },
    { "nativeGetCurrentModalDialog",
"("
")"
"Lorg/chromium/chrome/browser/JavascriptAppModalDialog;",
    reinterpret_cast<void*>(GetCurrentModalDialog) },
  };
  const int kMethodsJavascriptAppModalDialogSize =
      arraysize(kMethodsJavascriptAppModalDialog);

  if (env->RegisterNatives(g_JavascriptAppModalDialog_clazz,
                           kMethodsJavascriptAppModalDialog,
                           kMethodsJavascriptAppModalDialogSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_JavascriptAppModalDialog_JNI

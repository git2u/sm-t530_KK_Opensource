// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/sec/android/app/sbrowser/bridge/SbrAutocompleteBridge

#ifndef com_sec_android_app_sbrowser_bridge_SbrAutocompleteBridge_JNI
#define com_sec_android_app_sbrowser_bridge_SbrAutocompleteBridge_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrAutocompleteBridgeClassPath[] =
    "com/sec/android/app/sbrowser/bridge/SbrAutocompleteBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrAutocompleteBridge_clazz = NULL;
}  // namespace

static jint Init(JNIEnv* env, jobject obj,
    jobject chromeViewcore);

static jstring QualifyPartialURLQuery(JNIEnv* env, jclass clazz,
    jstring query);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeSbrAutocompleteBridge) {
  DCHECK(nativeSbrAutocompleteBridge) << "Destroy";
  SbrAutocompleteBridge* native =
      reinterpret_cast<SbrAutocompleteBridge*>(nativeSbrAutocompleteBridge);
  return native->Destroy(env, obj);
}

static void Start(JNIEnv* env, jobject obj,
    jint nativeSbrAutocompleteBridge,
    jstring text,
    jstring desired_tld,
    jstring currentUrl,
    jboolean prevent_inline_autocomplete,
    jboolean prefer_keyword,
    jboolean allow_exact_keyword_match,
    jboolean synchronous_only) {
  DCHECK(nativeSbrAutocompleteBridge) << "Start";
  SbrAutocompleteBridge* native =
      reinterpret_cast<SbrAutocompleteBridge*>(nativeSbrAutocompleteBridge);
  return native->Start(env, obj, text, desired_tld, currentUrl,
      prevent_inline_autocomplete, prefer_keyword, allow_exact_keyword_match,
      synchronous_only);
}

static void Stop(JNIEnv* env, jobject obj,
    jint nativeSbrAutocompleteBridge,
    jboolean clear_results) {
  DCHECK(nativeSbrAutocompleteBridge) << "Stop";
  SbrAutocompleteBridge* native =
      reinterpret_cast<SbrAutocompleteBridge*>(nativeSbrAutocompleteBridge);
  return native->Stop(env, obj, clear_results);
}

static base::subtle::AtomicWord g_SbrAutocompleteBridge_onSuggestionsReceived =
    0;
static void Java_SbrAutocompleteBridge_onSuggestionsReceived(JNIEnv* env,
    jobject obj, jobjectArray suggestions,
    jstring inlineAutocompleteText) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_SbrAutocompleteBridge_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_SbrAutocompleteBridge_clazz,
      "onSuggestionsReceived",

"("
"[Lcom/sec/android/app/sbrowser/common/SBrowserSuggestion;"
"Ljava/lang/String;"
")"
"V",
      &g_SbrAutocompleteBridge_onSuggestionsReceived);

  env->CallVoidMethod(obj,
      method_id, suggestions, inlineAutocompleteText);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrAutocompleteBridge_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrAutocompleteBridgeClassPath).obj()));
  static const JNINativeMethod kMethodsSbrAutocompleteBridge[] = {
    { "nativeInit",
"("
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeStart",
"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Ljava/lang/String;"
"Z"
"Z"
"Z"
"Z"
")"
"V", reinterpret_cast<void*>(Start) },
    { "nativeStop",
"("
"I"
"Z"
")"
"V", reinterpret_cast<void*>(Stop) },
    { "nativeQualifyPartialURLQuery",
"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(QualifyPartialURLQuery) },
  };
  const int kMethodsSbrAutocompleteBridgeSize =
      arraysize(kMethodsSbrAutocompleteBridge);

  if (env->RegisterNatives(g_SbrAutocompleteBridge_clazz,
                           kMethodsSbrAutocompleteBridge,
                           kMethodsSbrAutocompleteBridgeSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // com_sec_android_app_sbrowser_bridge_SbrAutocompleteBridge_JNI

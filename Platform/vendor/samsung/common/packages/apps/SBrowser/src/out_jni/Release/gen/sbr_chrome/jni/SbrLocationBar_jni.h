// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/samsung/chrome/browser/SbrLocationBar

#ifndef org_samsung_chrome_browser_SbrLocationBar_JNI
#define org_samsung_chrome_browser_SbrLocationBar_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kSbrLocationBarClassPath[] =
    "org/samsung/chrome/browser/SbrLocationBar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_SbrLocationBar_clazz = NULL;
}  // namespace

static jstring GetUrlForSearchQuery(JNIEnv* env, jclass clazz,
    jstring s);

static jint Init(JNIEnv* env, jobject obj);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeSbrLocationBar) {
  DCHECK(nativeSbrLocationBar) << "Destroy";
  SbrLocationBar* native =
      reinterpret_cast<SbrLocationBar*>(nativeSbrLocationBar);
  return native->Destroy(env, obj);
}

static jint GetSecurityLevel(JNIEnv* env, jobject obj,
    jint nativeSbrLocationBar,
    jobject var1) {
  DCHECK(nativeSbrLocationBar) << "GetSecurityLevel";
  SbrLocationBar* native =
      reinterpret_cast<SbrLocationBar*>(nativeSbrLocationBar);
  return native->GetSecurityLevel(env, obj, var1);
}

static void OnSecurityButtonClicked(JNIEnv* env, jobject obj,
    jint nativeSbrLocationBar,
    jobject context,
    jobject var1) {
  DCHECK(nativeSbrLocationBar) << "OnSecurityButtonClicked";
  SbrLocationBar* native =
      reinterpret_cast<SbrLocationBar*>(nativeSbrLocationBar);
  return native->OnSecurityButtonClicked(env, obj, context, var1);
}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_SbrLocationBar_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kSbrLocationBarClassPath).obj()));
  static const JNINativeMethod kMethodsSbrLocationBar[] = {
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeGetSecurityLevel",
"("
"I"
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"I", reinterpret_cast<void*>(GetSecurityLevel) },
    { "nativeGetUrlForSearchQuery",
"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetUrlForSearchQuery) },
    { "nativeInit",
"("
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeOnSecurityButtonClicked",
"("
"I"
"Landroid/content/Context;"
"Lorg/chromium/content/browser/ContentViewCore;"
")"
"V", reinterpret_cast<void*>(OnSecurityButtonClicked) },
  };
  const int kMethodsSbrLocationBarSize = arraysize(kMethodsSbrLocationBar);

  if (env->RegisterNatives(g_SbrLocationBar_clazz,
                           kMethodsSbrLocationBar,
                           kMethodsSbrLocationBarSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_samsung_chrome_browser_SbrLocationBar_JNI

// Copyright (c) 2012 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/NavigationPopup

#ifndef org_chromium_chrome_browser_NavigationPopup_JNI
#define org_chromium_chrome_browser_NavigationPopup_JNI

#include <jni.h>

#include "base/android/jni_android.h"
#include "base/android/scoped_java_ref.h"
#include "base/basictypes.h"
#include "base/logging.h"

using base::android::ScopedJavaLocalRef;

// Step 1: forward declarations.
namespace {
const char kNavigationPopupClassPath[] =
    "org/chromium/chrome/browser/NavigationPopup";
// Leaking this jclass as we cannot use LazyInstance from some threads.
jclass g_NavigationPopup_clazz = NULL;
}  // namespace

static jstring GetHistoryUrl(JNIEnv* env, jclass clazz);

static jint Init(JNIEnv* env, jobject obj);

// Step 2: method stubs.
static void Destroy(JNIEnv* env, jobject obj,
    jint nativeNavigationPopup) {
  DCHECK(nativeNavigationPopup) << "Destroy";
  NavigationPopup* native =
      reinterpret_cast<NavigationPopup*>(nativeNavigationPopup);
  return native->Destroy(env, obj);
}

static void FetchFaviconForUrl(JNIEnv* env, jobject obj,
    jint nativeNavigationPopup,
    jstring url) {
  DCHECK(nativeNavigationPopup) << "FetchFaviconForUrl";
  NavigationPopup* native =
      reinterpret_cast<NavigationPopup*>(nativeNavigationPopup);
  return native->FetchFaviconForUrl(env, obj, url);
}

static base::subtle::AtomicWord g_NavigationPopup_onFaviconUpdated = 0;
static void Java_NavigationPopup_onFaviconUpdated(JNIEnv* env, jobject obj,
    jstring url,
    jobject favicon) {
  /* Must call RegisterNativesImpl()  */
  DCHECK(g_NavigationPopup_clazz);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, g_NavigationPopup_clazz,
      "onFaviconUpdated",

"("
"Ljava/lang/String;"
"Ljava/lang/Object;"
")"
"V",
      &g_NavigationPopup_onFaviconUpdated);

  env->CallVoidMethod(obj,
      method_id, url, favicon);
  base::android::CheckException(env);

}

// Step 3: RegisterNatives.

static bool RegisterNativesImpl(JNIEnv* env) {

  g_NavigationPopup_clazz = reinterpret_cast<jclass>(env->NewGlobalRef(
      base::android::GetClass(env, kNavigationPopupClassPath).obj()));
  static const JNINativeMethod kMethodsNavigationPopup[] = {
    { "nativeGetHistoryUrl",
"("
")"
"Ljava/lang/String;", reinterpret_cast<void*>(GetHistoryUrl) },
    { "nativeInit",
"("
")"
"I", reinterpret_cast<void*>(Init) },
    { "nativeDestroy",
"("
"I"
")"
"V", reinterpret_cast<void*>(Destroy) },
    { "nativeFetchFaviconForUrl",
"("
"I"
"Ljava/lang/String;"
")"
"V", reinterpret_cast<void*>(FetchFaviconForUrl) },
  };
  const int kMethodsNavigationPopupSize = arraysize(kMethodsNavigationPopup);

  if (env->RegisterNatives(g_NavigationPopup_clazz,
                           kMethodsNavigationPopup,
                           kMethodsNavigationPopupSize) < 0) {
    LOG(ERROR) << "RegisterNatives failed in " << __FILE__;
    return false;
  }

  return true;
}

#endif  // org_chromium_chrome_browser_NavigationPopup_JNI
